/******/

// webpackBootstrap

// install a JSONP callback for chunk loading

// The module cache

// object to store loaded and loading chunks

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// Promise = chunk loading, 0 = chunk loaded

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// The chunk loading function for additional chunks

// Since all referenced chunks are already included

// in this file, this function is empty here.

// expose the modules object (__webpack_modules__)

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

// on error function for async loading

// Load entry module and return exports

/************************************************************************/

/* 0 */

/***/

/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */

// For CommonJS and CommonJS-like environments where a proper `window`

// is present, execute the factory and get jQuery.

// For environments that do not have a `window` with a `document`

// (such as Node.js), expose a factory as module.exports.

// This accentuates the need for the creation of a real `window`.

// e.g. var jQuery = require("jquery")(window);

// See ticket #14549 for more info.

// Pass this if window is not defined yet

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1

// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode

// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common

// enough that all such attempts are guarded in a try block.

// Support: Chrome <=57, Firefox <=52

// In some browsers, typeof returns "function" for HTML <object> elements

// (i.e., `typeof document.createElement( "object" ) === "function"`).

// We don't want to classify *any* DOM node as a function.

// Support: Firefox 64+, Edge 18+

// Some browsers don't support the "nonce" property on scripts.

// On the other hand, just using `getAttribute` is not enough as

// the `nonce` attribute is reset to an empty string whenever it

// becomes browsing-context connected.

// See https://github.com/whatwg/html/issues/2369

// See https://html.spec.whatwg.org/#nonce-attributes

// The `node.getAttribute` check was added for the sake of

// `jQuery.globalEval` so that it can fake a nonce-containing node

// via an object.

// Support: Android <=2.3 only (functionish RegExp)

/* global Symbol */

// Defining this global in .eslintrc.json would create a danger of using the global

// unguarded in another place, it seems safer to define global only for this module

// Define a local copy of jQuery

// The jQuery object is actually just the init constructor 'enhanced'

// Need init if jQuery is called (just allow error to be thrown if not included)

// Support: real iOS 8.2 only (not reproducible in simulator)

// `in` check used to prevent JIT error (gh-2145)

// hasOwn isn't used here due to false negatives

// regarding Nodelist length in IE

// The current version of jQuery being used

// The default length of a jQuery object is 0

// Get the Nth element in the matched element set OR

// Get the whole matched element set as a clean array

// Return all the elements in a clean array

// Return just the one element from the set

// Take an array of elements and push it onto the stack

// (returning the new matched element set)

// Build a new jQuery matched element set

// Add the old object onto the stack (as a reference)

// Return the newly-formed element set

// Execute a callback for every element in the matched set.

// For internal use only.

// Behaves like an Array's method, not like a jQuery method.

// Handle a deep copy situation

// Skip the boolean and the target

// Handle case when target is a string or something (possible in deep copy)

// Extend jQuery itself if only one argument is passed

// Only deal with non-null/undefined values

// Extend the base object

// Prevent Object.prototype pollution

// Prevent never-ending loop

// Recurse if we're merging plain objects or arrays

// Ensure proper type for the source value

// Never move original objects, clone them

// Return the modified object

// Unique for each copy of jQuery on the page

// Assume jQuery is ready without the ready module

// Detect obvious negatives

// Use toString instead of jQuery.type to catch host objects

// Objects with no prototype (e.g., `Object.create( null )`) are plain

// Objects with prototype are plain iff they were constructed by a global Object function

// Evaluates a script in a provided context; falls back to the global one

// if not specified.

// results is for internal usage only

// Support: Android <=4.0 only, PhantomJS 1 only

// push.apply(_, arraylike) throws on ancient WebKit

// Go through the array, only saving the items

// that pass the validator function

// arg is for internal usage only

// Go through the array, translating each of the items to their new values

// Go through every key on the object,

// Flatten any nested arrays

// A global GUID counter for objects

// jQuery.support is not used in Core but other projects attach their

// properties to it so it needs to exist.

// Populate the class2type map

/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */

// Local document vars

// Instance-specific data

// Instance methods

// Use a stripped-down indexOf as it's faster than native

// https://jsperf.com/thor-indexof-vs-for/5

// Regular expressions

// http://www.w3.org/TR/css3-selectors/#whitespace

// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram

// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors

// Operator (capture 2)

// "Attribute values must be CSS identifiers [capture 5]

// or strings [capture 3 or capture 4]"

// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter

// For use in libraries implementing .is()

// We use this for POS matching in `select`

// Easily-parseable/retrievable ID or TAG or CLASS selectors

// CSS escapes

// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters

// Replace a hexadecimal escape sequence with the encoded Unicode code point

// Support: IE <=11+

// For values outside the Basic Multilingual Plane (BMP), manually construct a

// surrogate pair

// CSS string/identifier serialization

// https://drafts.csswg.org/cssom/#common-serializing-idioms

// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER

// Other potentially-special ASCII characters get backslash-escaped

// Used for iframes

// See setDocument()

// Removing the function wrapper causes a "Permission Denied"

// error in IE

// Optimize for push.apply( _, NodeList )

// Support: Android<4.0

// Detect silently failing push.apply

// eslint-disable-next-line no-unused-expressions

// Leverage slice if possible

// Support: IE<9

// Otherwise append directly

// Can't trust NodeList.length

// nodeType defaults to 9, since context defaults to document

// Return early from calls with invalid selector or context

// Try to shortcut find operations (as opposed to filters) in HTML documents

// If the selector is sufficiently simple, try using a "get*By*" DOM method

// (excepting DocumentFragment context, where the methods don't exist)

// ID selector

// Document context

// Element context

// Support: IE, Opera, Webkit

// TODO: identify versions

// getElementById can match elements by name instead of ID

// Type selector

// Class selector

// Take advantage of querySelectorAll

// Support: IE 8 only

// Exclude object elements

// qSA considers elements outside a scoping root when evaluating child or

// descendant combinators, which is not what we want.

// In such cases, we work around the behavior by prefixing every selector in the

// list with an ID selector referencing the scope context.

// The technique has to be used as well when a leading combinator is used

// as such selectors are not recognized by querySelectorAll.

// Thanks to Andrew Dupont for this technique.

// Expand context for sibling selectors

// We can use :scope instead of the ID hack if the browser

// supports it & if we're not changing the context.

// Capture the context ID, setting it first if necessary

// Prefix every selector in the list

// All others

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */

// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)

// Only keep the most recent entries

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */

// Remove from its parent by default

// release memory in IE

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */

// Use IE sourceIndex if available on both nodes

// Check if b follows a

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */

// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable

// Only certain elements can match :enabled or :disabled

// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled

// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled

// Check for inherited disabledness on relevant non-disabled elements:

// * listed form-associated elements in a disabled fieldset

//   https://html.spec.whatwg.org/multipage/forms.html#category-listed

//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled

// * option elements in a disabled optgroup

//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled

// All such elements have a "form" property.

// Option elements defer to a parent optgroup if present

// Where there is no isDisabled, check manually

/* jshint -W018 */

// Remaining elements are neither :enabled nor :disabled

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */

// Match elements found at the specified indexes

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */

// Expose support vars for convenience

// Add button/input type pseudos

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */

// Support: IE <=8

// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes

// https://bugs.jquery.com/ticket/4833

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */

// Return early if doc is invalid or already selected

// Support: IE 11+, Edge 17 - 18+

// IE/Edge sometimes throw a "Permission denied" error when strict-comparing

// two documents; shallow comparisons work.

// eslint-disable-next-line eqeqeq

// Update global variables

// Support: IE 9 - 11+, Edge 12 - 18+

// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

// Support: IE 11, Edge

// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,

// Safari 4 - 5 only, Opera <=11.6 - 12.x only

// IE/Edge & older browsers don't support the :scope pseudo-class.

// Support: Safari 6.0 only

// Safari 6.0 supports :scope but it's an alias of :root there.

/* Attributes
	---------------------------------------------------------------------- */

// Support: IE<8

// Verify that getAttribute really returns attributes and not properties

// (excepting IE8 booleans)

/* getElement(s)By*
	---------------------------------------------------------------------- */

// Check if getElementsByTagName("*") returns only elements

// Support: IE<10

// Check if getElementById returns elements by name

// The broken getElementById methods don't pick up programmatically-set names,

// so use a roundabout getElementsByName test

// ID filter and find

// Support: IE 6 - 7 only

// getElementById is not reliable as a find shortcut

// Verify the id attribute

// Fall back on getElementsByName

// Tag

// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too

// Filter out possible comments

// Class

/* QSA/matchesSelector
	---------------------------------------------------------------------- */

// QSA and matchesSelector support

// matchesSelector(:active) reports false when true (IE9/Opera 11.5)

// qSa(:focus) reports false when true (Chrome 21)

// We allow this because of a bug in IE8/9 that throws an error

// whenever `document.activeElement` is accessed on an iframe

// So, we allow :focus to pass through QSA all the time to avoid the IE error

// See https://bugs.jquery.com/ticket/13378

// Build QSA regex

// Regex strategy adopted from Diego Perini

// Select is set to empty string on purpose

// This is to test IE's treatment of not explicitly

// setting a boolean content attribute,

// since its presence should be enough

// https://bugs.jquery.com/ticket/12359

// Support: IE8, Opera 11-12.16

// Nothing should be selected when empty strings follow ^= or $= or *=

// The test attribute must be unknown in Opera but "safe" for WinRT

// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

// Support: IE8

// Boolean attributes and "value" are not treated correctly

// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+

// Support: IE 11+, Edge 15 - 18+

// IE 11/Edge don't find elements on a `[name='']` query in some cases.

// Adding a temporary attribute to the document before the selection works

// around the issue.

// Interestingly, IE 10 & older don't seem to have the issue.

// Webkit/Opera - :checked should return selected option elements

// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked

// IE8 throws error here and will not see later tests

// Support: Safari 8+, iOS 8+

// https://bugs.webkit.org/show_bug.cgi?id=136851

// In-page `selector#id sibling-combinator selector` fails

// Support: Firefox <=3.6 - 5 only

// Old Firefox doesn't throw on a badly-escaped identifier.

// Support: Windows 8 Native Apps

// The type and name attributes are restricted during .innerHTML assignment

// Enforce case-sensitivity of name attribute

// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)

// Support: IE9-11+

// IE's :disabled selector does not pick up the children of disabled fieldsets

// Support: Opera 10 - 11 only

// Opera 10-11 does not throw on post-comma invalid pseudos

// Check to see if it's possible to do matchesSelector

// on a disconnected node (IE 9)

// This should fail with an exception

// Gecko does not error, returns false instead

/* Contains
	---------------------------------------------------------------------- */

// Element contains another

// Purposefully self-exclusive

// As in, an element does not contain itself

/* Sorting
	---------------------------------------------------------------------- */

// Document order sorting

// Flag for duplicate removal

// Sort on method existence if only one input has compareDocumentPosition

// Disconnected nodes

// Calculate position if both inputs belong to the same document

// Otherwise we know they are disconnected

// Choose the first element that is related to our preferred document

// Exit early if the nodes are identical

// Parentless nodes are either documents or disconnected

/* eslint-disable eqeqeq */

/* eslint-enable eqeqeq */

// If the nodes are siblings, we can do a quick check

// Otherwise we need full lists of their ancestors for comparison

// Walk down the tree looking for a discrepancy

// Do a sibling check if the nodes have a common ancestor

// Otherwise nodes in our document sort first

// IE 9's matchesSelector returns false on disconnected nodes

// As well, disconnected nodes are said to be in a document

// fragment in IE 9

// Set document vars if needed

// Don't get fooled by Object.prototype properties (jQuery #13807)

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */

// Unless we *know* we can detect duplicates, assume their presence

// Clear input after sorting to release objects

// See https://github.com/jquery/sizzle/pull/225

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */

// Use textContent for elements

// innerText usage removed for consistency of new lines (jQuery #11153)

// Traverse its children

// Do not include comment or processing instruction nodes

// If no nodeType, this is expected to be an array

// Do not traverse comment nodes

// Can be adjusted by the user

// Move the given value to match[3] whether quoted or unquoted

/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/

// nth-* requires argument

// numeric x and y parameters for Expr.filter.CHILD

// remember that false/true cast respectively to 0/1

// Accept quoted arguments as-is

// Get excess from tokenize (recursively)

// advance to the next closing parenthesis

// excess is a negative index

// Shortcut for :nth-*(n)

// :(first|last|only)-(child|of-type)

// Reverse direction for :only-* (if we haven't yet done so)

// non-xml :nth-child(...) stores cache data on `parent`

// Seek `elem` from a previously-cached index

// ...in a gzip-friendly way

// Support: IE <9 only

// Defend against cloned attroperties (jQuery gh-1709)

// Fallback to seeking `elem` from the start

// When found, cache indexes on `parent` and break

// xml :nth-child(...)

// or :nth-last-child(...) or :nth(-last)?-of-type(...)

// Use previously-cached element index if available

// Use the same loop as above to seek `elem` from the start

// Cache the index of each encountered element

// Incorporate the offset, then check against cycle size

// pseudo-class names are case-insensitive

// http://www.w3.org/TR/selectors/#pseudo-classes

// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters

// Remember that setFilters inherits from pseudos

// The user may use createPseudo to indicate that

// arguments are needed to create the filter function

// just as Sizzle does

// But maintain support for old signatures

// Potentially complex pseudos

// Trim the selector passed to compile

// to avoid treating leading and trailing

// spaces as combinators

// Match elements unmatched by `matcher`

// Don't keep the element (issue #299)

// "Whether an element is represented by a :lang() selector

// is based solely on the element's language value

// being equal to the identifier C,

// or beginning with the identifier C immediately followed by "-".

// The matching of C against the element's language value is performed case-insensitively.

// The identifier C does not have to be a valid language name."

// http://www.w3.org/TR/selectors/#lang-pseudo

// lang value must be a valid identifier

// Miscellaneous

// Boolean properties

// In CSS3, :checked should return both checked and selected elements

// Accessing this property makes selected-by-default

// options in Safari work properly

// Contents

// http://www.w3.org/TR/selectors/#empty-pseudo

// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),

//   but not by others (comment: 8; processing instruction: 7; etc.)

// nodeType < 6 works because attributes (2) do not appear as children

// Element/input types

// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"

// Position-in-collection

// Easy API for creating new setFilters

// Check against closest ancestor/preceding element

// Check against all ancestor/preceding elements

// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

// Assign to newCache so results back-propagate to previous elements

// A match means we're done; a fail means we have to keep checking

// Reuse newcache so results back-propagate to previous elements

// Get initial elements from seed or context

// Prefilter to get matcher input, preserving a map for seed-results synchronization

// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,

// ...intermediate processing is necessary

// ...otherwise use results directly

// Find primary matches

// Apply postFilter

// Un-match failing elements by moving them back to matcherIn

// Get the final matcherOut by condensing this intermediate into postFinder contexts

// Restore matcherIn since elem is not yet a final match

// Move matched elements from seed to results to keep them synchronized

// Add elements to results, through postFinder if defined

// The foundational matcher ensures that elements are reachable from top-level context(s)

// Avoid hanging onto element (issue #299)

// Return special upon seeing a positional matcher

// Find the next relative operator (if any) for proper handling

// If the preceding token was a descendant combinator, insert an implicit any-element `*`

// Filters

// Comma and first run

// Don't consume trailing commas as valid

// Combinators

// Cast descendant combinators to space

// Return the length of the invalid excess

// if we're just parsing

// Otherwise, throw an error or return tokens

// Cache the tokens

/* Internal Use Only */

// Generate a function of recursive functions that can be used to check each element

// Cache the compiled function

// Save selector and tokenization

// We must always have either seed elements or outermost context

// Use integer dirruns iff this is the outermost matcher

// Add elements passing elementMatchers directly to results

// Support: IE<9, Safari

// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id

// Track unmatched elements for set filters

// They will have gone through all possible matchers

// Lengthen the array for every element, matched or not

// `i` is now the count of elements visited above, and adding it to `matchedCount`

// makes the latter nonnegative.

// Apply set filters to unmatched elements

// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`

// equals `i`), unless we didn't visit _any_ elements in the above loop because we have

// no element matchers and no seed.

// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that

// case, which will result in a "00" `matchedCount` that differs from `i` but is also

// numerically zero.

// Reintegrate element matches to eliminate the need for sorting

// Discard index placeholder values to get only actual matches

// Add matches to results

// Seedless set matches succeeding multiple successful matchers stipulate sorting

// Override manipulation of globals by nested matchers

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */

// Try to minimize operations if there is only one selector in the list and no seed

// (the latter of which guarantees us context)

// Reduce context if the leading compound selector is an ID

// Precompiled matchers will still verify ancestry, so step up a level

// Fetch a seed set for right-to-left matching

// If seed is empty or no tokens remain, we can return early

// Compile and execute a filtering function if one is not provided

// Provide `match` to avoid retokenization if we modified the selector above

// One-time assignments

// Sort stability

// Support: Chrome 14-35+

// Always assume duplicates if they aren't passed to the comparison function

// Initialize against the default document

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)

// Detached nodes confoundingly follow *each other*

// Should return 1, but returns 4 (following)

// Prevent attribute/property "interpolation"

// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

// Use defaultValue in place of getAttribute("value")

// Use getAttributeNode to fetch booleans when getAttribute lies

// Deprecated

// Implement the identical functionality for filter and not

// Single element

// Arraylike of elements (jQuery, arguments, Array)

// If this is a positional/relative selector, check membership in the returned set

// so $("p:first").is("p:last") won't return true for a doc with two "p".

// Initialize a jQuery object

// A central reference to the root jQuery(document)

// A simple way to check for HTML strings

// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)

// Strict HTML recognition (#11290: must start with <)

// Shortcut simple #id case for speed

// Give the init function the jQuery prototype for later instantiation

// HANDLE: $(""), $(null), $(undefined), $(false)

// Method init() accepts an alternate rootjQuery

// so migrate can support jQuery.sub (gh-2101)

// Handle HTML strings

// Match html or make sure no context is specified for #id

// Assume that strings that start and end with <> are HTML and skip the regex check

// HANDLE: $(DOMElement)

// HANDLE: $(html) -> $(array)

// HANDLE: $(html, props)

// Option to run scripts is true for back-compat

// Intentionally let the error be thrown if parseHTML is not present

// Properties of context are called as methods if possible

// HANDLE: $(#id)

// HANDLE: $(expr, $(...))

// Inject the element directly into the jQuery object

// Execute immediately if ready is not present

// Initialize central reference

// Methods guaranteed to produce a unique set when starting from a unique set

// Positional selectors never match, since there's no _selection_ context

// Always skip document fragments

// Don't pass non-elements to Sizzle

// Determine the position of an element within the set

// No argument, return index in parent

// Index in selector

// If it receives a jQuery object, the first element is used

// Support: IE 11+

// <object> elements with no `data` attribute has an object

// `contentDocument` with a `null` prototype.

// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only

// Treat the template element as a regular one in browsers that

// don't support it.

// Remove duplicates

// Reverse order for parents* and prev-derivatives

// Convert String-formatted options into Object-formatted ones

// Check for promise aspect first to privilege synchronous behavior

// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:

// * false: [ value ].slice( 0 ) => resolve( value )

// * true: [ value ].slice( 1 ) => resolve()

// For Promises/A+, convert exceptions into rejections

// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in

// Deferred#then to conditionally suppress rejection.

// Support: Android 4.0 only

// Strict mode functions invoked without .call/.apply get global-object context

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */

// Convert options from String-formatted to Object-formatted if needed

// (we check in cache first)

// Flag to know if list is currently firing

// Last fire value for non-forgettable lists

// Flag to know if list was already fired

// Flag to prevent firing

// Actual callback list

// Queue of execution data for repeatable lists

// Index of currently firing callback (modified by add/remove as needed)

// Fire callbacks

// Enforce single-firing

// Execute callbacks for all pending executions,

// respecting firingIndex overrides and runtime changes

// Run callback and check for early termination

// Jump to end and forget the data so .add doesn't re-fire

// Forget the data if we're done with it

// Clean up if we're done firing for good

// Keep an empty list if we have data for future add calls

// Actual Callbacks object

// Add a callback or a collection of callbacks to the list

// If we have memory from a past run, we should fire after adding

// Inspect recursively

// Remove a callback from the list

// Handle firing indexes

// Check if a given callback is in the list.

// If no argument is given, return whether or not list has callbacks attached.

// Remove all callbacks from the list

// Disable .fire and .add

// Abort any current/pending executions

// Clear all callbacks and values

// Disable .fire

// Also disable .add unless we have memory (since it would have no effect)

// Abort any pending executions

// Call all callbacks with the given context and arguments

// Call all the callbacks with the given arguments

// To know if the callbacks have already been called at least once

// action, add listener, callbacks,

// ... .then handlers, argument index, [final state]

// Keep pipe for back-compat

// Map tuples (progress, done, fail) to arguments (done, fail, progress)

// deferred.progress(function() { bind to newDefer or newDefer.notify })

// deferred.done(function() { bind to newDefer or newDefer.resolve })

// deferred.fail(function() { bind to newDefer or newDefer.reject })

// Support: Promises/A+ section 2.3.3.3.3

// https://promisesaplus.com/#point-59

// Ignore double-resolution attempts

// Support: Promises/A+ section 2.3.1

// https://promisesaplus.com/#point-48

// Support: Promises/A+ sections 2.3.3.1, 3.5

// https://promisesaplus.com/#point-54

// https://promisesaplus.com/#point-75

// Retrieve `then` only once

// Support: Promises/A+ section 2.3.4

// https://promisesaplus.com/#point-64

// Only check objects and functions for thenability

// Handle a returned thenable

// Special processors (notify) just wait for resolution

// ...and disregard older resolution values

// Only substitute handlers pass on context

// and multiple values (non-spec behavior)

// Process the value(s)

// Default process is resolve

// Only normal processors (resolve) catch and reject exceptions

// Support: Promises/A+ section 2.3.3.3.4.1

// https://promisesaplus.com/#point-61

// Ignore post-resolution exceptions

// Support: Promises/A+ section 2.3.3.3.1

// https://promisesaplus.com/#point-57

// Re-resolve promises immediately to dodge false rejection from

// subsequent errors

// Call an optional hook to record the stack, in case of exception

// since it's otherwise lost when execution goes async

// progress_handlers.add( ... )

// fulfilled_handlers.add( ... )

// rejected_handlers.add( ... )

// Get a promise for this deferred

// If obj is provided, the promise aspect is added to the object

// Add list-specific methods

// All done!

// promise.progress = list.add

// promise.done = list.add

// promise.fail = list.add

// Handle state

// state = "resolved" (i.e., fulfilled)

// state = "rejected"

// rejected_callbacks.disable

// fulfilled_callbacks.disable

// rejected_handlers.disable

// fulfilled_handlers.disable

// progress_callbacks.lock

// progress_handlers.lock

// progress_handlers.fire

// fulfilled_handlers.fire

// rejected_handlers.fire

// deferred.notify = function() { deferred.notifyWith(...) }

// deferred.resolve = function() { deferred.resolveWith(...) }

// deferred.reject = function() { deferred.rejectWith(...) }

// deferred.notifyWith = list.fireWith

// deferred.resolveWith = list.fireWith

// deferred.rejectWith = list.fireWith

// Make the deferred a promise

// Call given func if any

// Deferred helper

// count of uncompleted subordinates

// count of unprocessed arguments

// subordinate fulfillment data

// the master Deferred

// subordinate callback factory

// Single- and empty arguments are adopted like Promise.resolve

// Multiple arguments are aggregated like Promise.all array elements

// These usually indicate a programmer mistake during development,

// warn about them ASAP rather than swallowing them by default.

// Support: IE 8 - 9 only

// Console exists when dev tools are open, which can happen at any time

// The deferred used on DOM ready

// The ready event handler and self cleanup method

// Catch cases where $(document).ready() is called

// after the browser event has already occurred.

// Support: IE <=9 - 10 only

// Older IE sometimes signals "interactive" too soon

// Is the DOM ready to be used? Set to true once it occurs.

// A counter to track how many items to wait for before

// the ready event fires. See #6781

// Handle when the DOM is ready

// Abort if there are pending holds or we're already ready

// Remember that the DOM is ready

// If a normal DOM Ready event fired, decrement, and wait if need be

// If there are functions bound, to execute

// Handle it asynchronously to allow scripts the opportunity to delay ready

// Use the handy event callback

// A fallback to window.onload, that will always work

// Multifunctional method to get and set values of a collection

// The value/s can optionally be executed if it's a function

// Sets many values

// Sets one value

// Bulk operations run against the entire set

// Gets

// Matches dashed string for camelizing

// Used by camelCase as callback to replace()

// Convert dashed to camelCase; used by the css and data modules

// Support: IE <=9 - 11, Edge 12 - 15

// Microsoft forgot to hump their vendor prefix (#9572)

// Accepts only:

//  - Node

//    - Node.ELEMENT_NODE

//    - Node.DOCUMENT_NODE

//  - Object

//    - Any

// Check if the owner object already has a cache

// If not, create one

// We can accept data for non-element nodes in modern browsers,

// but we should not, see #8335.

// Always return an empty object.

// If it is a node unlikely to be stringify-ed or looped over

// use plain assignment

// Handle: [ owner, key, value ] args

// Always use camelCase key (gh-2257)

// Handle: [ owner, { properties } ] args

// Copy the properties one-by-one to the cache object

// In cases where either:

//

//   1. No key was specified

//   2. A string key was specified, but no value provided

// Take the "read" path and allow the get method to determine

// which value to return, respectively either:

//   1. The entire cache object

//   2. The data stored at the key

// When the key is not a string, or both a key and value

// are specified, set or extend (existing objects) with either:

//   1. An object of properties

//   2. A key and value

// Support array or space separated string of keys

// If key is an array of keys...

// We always set camelCase keys, so remove that.

// Remove the expando if there's no more data

// Support: Chrome <=35 - 45

// Webkit & Blink performance suffers when deleting properties

// from DOM nodes, so set to undefined instead

// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)

// If nothing was found internally, try to fetch any

// data from the HTML5 data-* attribute

// Only convert to a number if it doesn't change the string

// Make sure we set the data so it isn't changed later

// TODO: Now that all calls to _data and _removeData have been replaced

// with direct calls to dataPriv methods, these can be deprecated.

// Gets all values

// Support: IE 11 only

// The attrs elements can be null (#14894)

// Sets multiple values

// The calling jQuery object (element matches) is not empty

// (and therefore has an element appears at this[ 0 ]) and the

// `value` parameter was not undefined. An empty jQuery object

// will result in `undefined` for elem = this[ 0 ] which will

// throw an exception if an attempt to read a data cache is made.

// Attempt to get data from the cache

// The key will always be camelCased in Data

// Attempt to "discover" the data in

// HTML5 custom data-* attrs

// We tried really hard, but the data doesn't exist.

// Set the data...

// We always store the camelCased key

// Speed up dequeue by getting out quickly if this is just a lookup

// If the fx queue is dequeued, always remove the progress sentinel

// Add a progress sentinel to prevent the fx queue from being

// automatically dequeued

// Clear up the last queue stop function

// Not public - generate a queueHooks object, or return the current one

// Ensure a hooks for this queue

// Get a promise resolved when queues of a certain type

// are emptied (fx is the type by default)

// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only

// Check attachment across shadow DOM boundaries when possible (gh-3504)

// Support: iOS 10.0-10.2 only

// Early iOS 10 versions support `attachShadow` but not `getRootNode`,

// leading to errors. We need to check for `getRootNode`.

// Inline style trumps all

// isHiddenWithinTree might be called from jQuery#filter function;

// in that case, element will be second argument

// Otherwise, check computed style

// Support: Firefox <=43 - 45

// Disconnected elements can have computed display: none, so first confirm that elem is

// in the document.

// Starting value computation is required for potential unit mismatches

// Support: Firefox <=54

// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)

// Trust units reported by jQuery.css

// Iteratively approximate from a nonzero starting point

// Evaluate and update our best guess (doubling guesses that zero out).

// Finish if the scale equals or crosses 1 (making the old*new product non-positive).

// Make sure we update the tween properties later on

// Apply relative offset (+=/-=) if specified

// Determine new display value for elements that need to change

// Since we force visibility upon cascade-hidden elements, an immediate (and slow)

// check is required in this first loop unless we have a nonempty display value (either

// inline or about-to-be-restored)

// Remember what we're overwriting

// Set the display of the elements in a second loop to avoid constant reflow

// Support: Android 4.0 - 4.3 only

// Check state lost if the name is set (#11217)

// Support: Windows Web Apps (WWA)

// `name` and `type` must use .setAttribute for WWA (#14901)

// Support: Android <=4.1 only

// Older WebKit doesn't clone checked state correctly in fragments

// Support: IE <=11 only

// Make sure textarea (and checkbox) defaultValue is properly cloned

// Support: IE <=9 only

// IE <=9 replaces <option> tags with their contents when inserted outside of

// the select element.

// We have to close these tags to support XHTML (#13200)

// XHTML parsers do not magically insert elements in the

// same way that tag soup parsers do. So we cannot shorten

// this by omitting <tbody> or other required elements.

// Support: IE <=9 - 11 only

// Use typeof to avoid zero-argument method invocation on host objects (#15151)

// Mark scripts as having already been evaluated

// Add nodes directly

// Convert non-html into a text node

// Deserialize a standard representation

// Descend through wrappers to the right content

// Ensure the created nodes are orphaned (#12392)

// Remember the top-level container

// Convert html into DOM nodes

// Remove wrapper from fragment

// Skip elements already in the context collection (trac-4087)

// Capture executables

// Append to fragment

// Preserve script evaluation history

// Support: IE <=9 - 11+

// focus() and blur() are asynchronous, except when they are no-op.

// So expect focus to be synchronous when the element is already active,

// and blur to be synchronous when the element is not already active.

// (focus and blur are always synchronous in other supported browsers,

// this just defines when we can count on it).

// Accessing document.activeElement can throw unexpectedly

// https://bugs.jquery.com/ticket/13393

// Types can be a map of types/handlers

// ( types-Object, selector, data )

// ( types-Object, data )

// ( types, fn )

// ( types, selector, fn )

// ( types, data, fn )

// Use same guid so caller can remove using origFn

// Can use an empty set, since event contains the info

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */

// Ensure the presence of an event listener that handles manually-triggered

// synthetic events by interrupting progress until reinvoked in response to

// *native* events that it fires directly, ensuring that state changes have

// already occurred before other listeners are invoked.

// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add

// Register the controller as a special universal handler for all event namespaces

// Interrupt processing of the outer synthetic .trigger()ed event

// Saved data should be false in such cases, but might be a leftover capture object

// from an async native handler (gh-4350)

// If this is a native event triggered above, everything is now in order

// Fire an inner synthetic event with the original arguments

// Store arguments for use when handling the inner native event

// There will always be at least one argument (an event object), so this array

// will not be confused with a leftover capture object.

// Trigger the native event and capture its result

// focus() and blur() are asynchronous

// Cancel the outer synthetic event

// If this is an inner synthetic event for an event with a bubbling surrogate

// (focus or blur), assume that the surrogate already propagated from triggering the

// native event and prevent that from happening again here.

// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the

// bubbling surrogate propagates *after* the non-bubbling base), but that seems

// less bad than duplication.

// ...and capture the result

// Extend with the prototype to reset the above stopImmediatePropagation()

// Abort handling of the native event

// Only attach events to objects that accept data

// Caller can pass in an object of custom data in lieu of the handler

// Ensure that invalid selectors throw exceptions at attach time

// Evaluate against documentElement in case elem is a non-element node (e.g., document)

// Make sure that the handler has a unique ID, used to find/remove it later

// Init the element's event structure and main handler, if this is the first

// Discard the second event of a jQuery.event.trigger() and

// when an event is called after a page has unloaded

// Handle multiple events separated by a space

// There *must* be a type, no attaching namespace-only handlers

// If event changes its type, use the special event handlers for the changed type

// If selector defined, determine special event api type, otherwise given type

// Update special based on newly reset type

// handleObj is passed to all event handlers

// Init the event handler queue if we're the first

// Only use addEventListener if the special events handler returns false

// Add to the element's handler list, delegates in front

// Keep track of which events have ever been used, for event optimization

// Detach an event or set of events from an element

// Once for each type.namespace in types; type may be omitted

// Unbind all events (on this namespace, if provided) for the element

// Remove matching events

// Remove generic event handler if we removed something and no more handlers exist

// (avoids potential for endless recursion during removal of special event handlers)

// Remove data and the expando if it's no longer used

// Make a writable jQuery.Event from the native event object

// Use the fix-ed jQuery.Event rather than the (read-only) native event

// Call the preDispatch hook for the mapped type, and let it bail if desired

// Determine handlers

// Run delegates first; they may want to stop propagation beneath us

// If the event is namespaced, then each handler is only invoked if it is

// specially universal or its namespaces are a superset of the event's.

// Call the postDispatch hook for the mapped type

// Find delegate handlers

// Support: IE <=9

// Black-hole SVG <use> instance trees (trac-13180)

// Support: Firefox <=42

// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)

// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click

// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)

// Don't check non-elements (#13208)

// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)

// Don't conflict with Object.prototype properties (#13203)

// Add the remaining (directly-bound) handlers

// Prevent triggered image.load events from bubbling to window.load

// Utilize native event to ensure correct state for checkable inputs

// For mutual compressibility with _default, replace `this` access with a local var.

// `|| data` is dead code meant only to preserve the variable through minification.

// Claim the first handler

// Return false to allow normal processing in the caller

// dataPriv.set( el, "click", ... )

// Force setup before triggering a click

// Return non-false to allow normal event-path propagation

// For cross-browser consistency, suppress native .click() on links

// Also prevent it if we're currently inside a leveraged native-event stack

// Support: Firefox 20+

// Firefox doesn't alert if the returnValue field is not set.

// This "if" is needed for plain objects

// Allow instantiation without the 'new' keyword

// Event object

// Events bubbling up the document may have been marked as prevented

// by a handler lower down the tree; reflect the correct value.

// Support: Android <=2.3 only

// Create target properties

// Support: Safari <=6 - 7 only

// Target should not be a text node (#504, #13143)

// Put explicitly provided properties onto the event object

// Create a timestamp if incoming event doesn't have one

// Mark it as fixed

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding

// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html

// Includes all common event props including KeyEvent and MouseEvent specific props

// Add which for key events

// Add which for click: 1 === left; 2 === middle; 3 === right

// Utilize native event if possible so blur/focus sequence is correct

// dataPriv.set( this, "focus", ... )

// dataPriv.set( this, "blur", ... )

// Force setup before trigger

// Create mouseenter/leave events using mouseover/out and event-time checks

// so that event delegation works in jQuery.

// Do the same for pointerenter/pointerleave and pointerover/pointerout

// Support: Safari 7 only

// Safari sends mouseenter too often; see:

// https://bugs.chromium.org/p/chromium/issues/detail?id=470258

// for the description of the bug (it existed in older Chrome versions as well).

// For mouseenter/leave call the handler if related is outside the target.

// NB: No relatedTarget if the mouse left/entered the browser window

// ( event )  dispatched jQuery.Event

// ( types-object [, selector] )

// ( types [, fn] )

// Support: IE <=10 - 11, Edge 12 - 13 only

// In IE/Edge using regex groups here causes severe slowdowns.

// See https://connect.microsoft.com/IE/feedback/details/1736512/

// checked="checked" or checked

// Prefer a tbody over its parent table for containing new rows

// Replace/restore the type attribute of script elements for safe DOM manipulation

// 1. Copy private data: events, handlers, etc.

// 2. Copy user data

// Fix IE bugs, see support tests

// Fails to persist the checked state of a cloned checkbox or radio button.

// We can't cloneNode fragments that contain checked, in WebKit

// Use the original fragment for the last item

// instead of the first because it can end up

// being emptied incorrectly in certain situations (#8070).

// Keep references to cloned scripts for later restoration

// Evaluate executable scripts on first document insertion

// Reenable scripts

// Optional AJAX dependency, but won't run scripts if not present

// Fix IE cloning issues

// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2

// Copy the events from the original to the clone

// Return the cloned set

// Support: Chrome <=35 - 45+

// Assign undefined instead of using delete, see Data#remove

// Prevent memory leaks

// Remove any remaining nodes

// See if we can take a shortcut and just use innerHTML

// Remove element nodes and prevent memory leaks

// Make the changes, replacing each non-ignored context element with the new content

// Force callback invocation

// .get() because push.apply(_, arraylike) throws on ancient WebKit

// Support: IE <=11 only, Firefox <=30 (#15098, #14150)

// IE throws on elements created in popups

// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"

// Remember the old values, and insert the new ones

// Revert the old values

// Support: Firefox 51+

// Retrieving style before computed somehow

// fixes an issue with getting wrong values

// on detached elements

// getPropertyValue is needed for:

//   .css('filter') (IE 9 only, #12537)

//   .css('--customProperty) (#3144)

// A tribute to the "awesome hack by Dean Edwards"

// Android Browser returns percentage for some values,

// but width seems to be reliably pixels.

// This is against the CSSOM draft spec:

// https://drafts.csswg.org/cssom/#resolved-values

// Remember the original values

// Put in the new values to get a computed value out

// Revert the changed values

// IE returns zIndex value as an integer.

// Define the hook, we'll check on the first run if it's really needed.

// Hook needed; redefine it so that the support test is not executed again.

// Hook not needed (or it's not possible to use it due

// to missing dependency), remove it.

// Executing both pixelPosition & boxSizingReliable tests require only one layout

// so they're executed at the same time to save the second computation.

// This is a singleton, we need to execute it only once

// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3

// Some styles come back with percentage values, even though they shouldn't

// Support: IE 9 - 11 only

// Detect misreporting of content dimensions for box-sizing:border-box elements

// Support: IE 9 only

// Detect overflow:scroll screwiness (gh-3699)

// Support: Chrome <=64

// Don't get tricked when zoom affects offsetWidth (gh-4029)

// Nullify the div so it wouldn't be stored in the memory and

// it will also be a sign that checks already performed

// Finish early in limited (non-browser) environments

// Style of cloned element affects source element cloned (#8908)

// Support: IE 9 - 11+, Edge 15 - 18+

// IE/Edge misreport `getComputedStyle` of table rows with width/height

// set in CSS while `offset*` properties report correct values.

// Behavior in IE 9 is more subtle than in newer versions & it passes

// some versions of this test; make sure not to make it pass there!

// Return a vendor-prefixed property or undefined

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property

// Check for vendor prefixed names

// Swappable if display is none or starts with table

// except "table", "table-cell", or "table-caption"

// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display

// Any relative (+/-) values have already been

// normalized at this point

// Guard against undefined "subtract", e.g., when used as in cssHooks

// Adjustment may not be necessary

// Both box models exclude margin

// If we get here with a content-box, we're seeking "padding" or "border" or "margin"

// For "content", subtract padding

// For "content" or "padding", subtract border

// Add padding

// For "border" or "margin", add border

// Account for positive content-box scroll gutter when requested by providing computedVal

// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border

// Assuming integer scroll gutter, subtract the rest and round down

// Start with computed style

// Return a confounding non-pixel value or feign ignorance, as appropriate.

// Use offsetWidth/offsetHeight for when box sizing is unreliable.

// In those cases, the computed value can be trusted to be border-box.

// Adjust for the element's box model

// Support: IE 10 - 11+, Edge 15 - 18+

// Interestingly, in some cases IE 9 doesn't suffer from this issue.

// Fall back to offsetWidth/offsetHeight when value is "auto"

// This happens for inline elements with no explicit setting (gh-3571)

// Support: Android <=4.1 - 4.3 only

// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)

// Make sure the element is visible & connected

// Where available, offsetWidth/offsetHeight approximate border box dimensions.

// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the

// retrieved value as a content box dimension.

// Normalize "" and auto

// Provide the current computed size to request scroll gutter calculation (gh-3589)

// Add in style property hooks for overriding the default

// behavior of getting and setting a style property

// We should always get a number back from opacity

// Don't automatically add "px" to these possibly-unitless properties

// Add in properties whose names you wish to fix before

// setting or getting the value

// Get and set the style property on a DOM Node

// Don't set styles on text and comment nodes

// Make sure that we're working with the right name

// Make sure that we're working with the right name. We don't

// want to query the value if it is a CSS custom property

// since they are user-defined.

// Check if we're setting a value

// Gets hook for the prefixed version, then unprefixed version

// If a hook was provided get the non-computed value from there

// Otherwise just get the value from the style object

// Convert "+=" or "-=" to relative numbers (#7345)

// Fixes bug #9237

// Make sure that null and NaN values aren't set (#7116)

// If a number was passed in, add the unit (except for certain CSS properties)

// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append

// "px" to a few hardcoded values.

// background-* props affect original clone's values

// If a hook was provided, use that value, otherwise just set the specified value

// want to modify the value if it is a CSS custom property

// Make numeric if forced or a qualifier was provided and val looks numeric

// If a hook was provided get the computed value from there

// Try prefixed name followed by the unprefixed name

// Otherwise, if a way to get the computed value exists, use that

// Convert "normal" to computed value

// Certain elements can have dimension info if we invisibly show them

// but it must have a current display style that would benefit

// Support: Safari 8+

// Table columns in Safari have non-zero offsetWidth & zero

// getBoundingClientRect().width unless display is changed.

// Running getBoundingClientRect on a disconnected node

// in IE throws an error.

// Only read styles.position if the test has a chance to fail

// to avoid forcing a reflow.

// Account for unreliable border-box dimensions by comparing offset* to computed and

// faking a content-box to get border and padding (gh-3699)

// Convert to pixels if value adjustment is needed

// These hooks are used by animate to expand properties

// Assumes a single number if not a string

// Use a property on the element directly when it is not a DOM element,

// or when there is no matching style property that exists.

// Passing an empty string as a 3rd parameter to .css will automatically

// attempt a parseFloat and fallback to a string if the parse fails.

// Simple values such as "10px" are parsed to Float;

// complex values such as "rotate(1rad)" are returned as-is.

// Use step hook for back compat.

// Use cssHook if its there.

// Use .style if available and use plain properties where available.

// Panic based approach to setting things on disconnected nodes

// Back compat <1.8 extension point

// Animations created synchronously will run synchronously

// Generate parameters to create a standard animation

// If we include width, step value is 1 to do all cssExpand values,

// otherwise step value is 2 to skip over Left and Right

// We're done with this property

// Don't match elem in the :animated selector

// If there's more to do, yield

// If this was an empty animation, synthesize a final progress notification

// Resolve the animation and report its conclusion

// If we are going to the end, we want to run all the tweens

// otherwise we skip this part

// Resolve when we played the last frame; otherwise, reject

// camelCase, specialEasing and expand cssHook pass

// Not quite $.extend, this won't overwrite existing keys.

// Reusing 'index' because we have the correct "name"

// Attach callbacks from options

// Queue-skipping animations hijack the fx hooks

// Detect show/hide animations

// Ensure the complete handler is called before this completes

// Pretend to be hidden if this is a "show" and

// there is still data from a stopped show/hide

// Bail out if this is a no-op like .hide().hide()

// Restrict "overflow" and "display" styles during box animations

// Record all 3 overflow attributes because IE does not infer the shorthand

// from identically-valued overflowX and overflowY and Edge just mirrors

// the overflowX value there.

// Identify a display type, preferring old show/hide data over the CSS cascade

// Get nonempty value(s) by temporarily forcing visibility

// Animate inline elements as inline-block

// Restore the original display value at the end of pure show/hide animations

// Implement show/hide animations

// General show/hide setup for this element animation

// Store hidden/visible for toggle so `.stop().toggle()` "reverses"

// Show elements before animating them

/* eslint-disable no-loop-func */

/* eslint-enable no-loop-func */

// The final step of a "hide" animation is actually hiding the element

// Per-property setup

// Go to the end state if fx are off

// Normalize opt.queue - true/undefined/null -> "fx"

// Queueing

// Show any hidden elements after setting opacity to 0

// Operate on a copy of prop so per-property easing won't be lost

// Empty animations, or finishing resolves immediately

// Start the next in the queue if the last step wasn't forced.

// Timers currently will call their complete callbacks, which

// will dequeue but only if they were gotoEnd.

// Enable finishing flag on private data

// Look for any active animations, and finish them

// Empty the queue first

// Look for any animations in the old queue and finish them

// Turn off finishing flag

// Generate shortcuts for custom animations

// Run the timer and safely remove it when done (allowing for external removal)

// Default speed

// Based off of the plugin by Clint Helfers, with permission.

// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

// Support: Android <=4.3 only

// Default value for a checkbox should be "on"

// Must access selectedIndex to make default options select

// An input loses its value after becoming a radio

// Don't get/set attributes on text, comment and attribute nodes

// Fallback to prop when attributes are not supported

// Attribute hooks are determined by the lowercase version

// Grab necessary hook if one is defined

// Attribute names can contain non-HTML whitespace characters

// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2

// Hooks for boolean attributes

// Remove boolean attributes when set to false

// Avoid an infinite loop by temporarily removing this function from the getter

// Strip and collapse whitespace according to HTML spec

// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

// Don't get/set properties on text, comment and attribute nodes

// Fix name and attach hooks

// elem.tabIndex doesn't always return the

// correct value when it hasn't been explicitly set

// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/

// Use proper attribute retrieval(#12072)

// Accessing the selectedIndex property

// forces the browser to respect setting selected

// on the option

// The getter ensures a default option is selected

// when in an optgroup

// eslint rule "no-unused-expressions" is disabled for this code

// since it considers such accessions noop

/* eslint no-unused-expressions: "off" */

// Only assign if different to avoid unneeded rendering.

// This expression is here for better compressibility (see addClass)

// Remove *all* instances

// Toggle individual class names

// Check each className given, space separated list

// Toggle whole class name

// Store className if set

// If the element has a class name or if we're passed `false`,

// then remove the whole classname (if there was one, the above saved it).

// Otherwise bring back whatever was previously saved (if anything),

// falling back to the empty string if nothing was stored.

// Treat null/undefined as ""; convert numbers to string

// If set returns undefined, fall back to normal setting

// Handle most common string cases

// Support: IE <=10 - 11 only

// option.text throws exceptions (#14686, #14858)

// Strip and collapse whitespace

// https://html.spec.whatwg.org/#strip-and-collapse-whitespace

// Loop through all the selected options

// IE8-9 doesn't update selected after form reset (#2551)

// Don't return options that are disabled or in a disabled optgroup

// We don't need an array for one selects

// Get the specific value for the option

// Multi-Selects return an array

/* eslint-disable no-cond-assign */

/* eslint-enable no-cond-assign */

// Force browsers to behave consistently when non-matching value is set

// Radios and checkboxes getter/setter

// Return jQuery for attributes-only inclusion

// Don't do events on text and comment nodes

// Namespaced trigger; create a regexp to match event type in handle()

// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

// Caller can pass in a jQuery.Event object, Object, or just an event type string

// Clean up the event in case it is being reused

// Clone any incoming data and prepend the event, creating the handler arg list

// Allow special events to draw outside the lines

// Determine event propagation path in advance, per W3C events spec (#9951)

// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)

// Only add window if we got to document (e.g., not plain obj or detached DOM)

// Fire handlers on the event path

// jQuery handler

// Native handler

// If nobody prevented the default action, do it now

// Call a native DOM method on the target with the same name as the event.

// Don't do default actions on window, that's where global variables be (#6170)

// Don't re-trigger an onFOO event when we call its FOO() method

// Prevent re-triggering of the same event, since we already bubbled it above

// focus/blur morphs to focusin/out; ensure we're not firing them right now

// Piggyback on a donor event to simulate a different one

// Used only for `focus(in | out)` events

// Support: Firefox <=44

// Firefox doesn't have focus(in | out) events

// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787

// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1

// focus(in | out) events fire after focus & blur events,

// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order

// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

// Attach a single capturing handler on the document while someone wants focusin/focusout

// Handle: regular nodes (via `this.ownerDocument`), window

// (via `this.document`) & document (via `this`).

// Cross-browser xml parsing

// IE throws on parseFromString with invalid input.

// Serialize array item.

// Treat each array item as a scalar.

// Item is non-scalar (array or object), encode its numeric index.

// Serialize scalar item.

// Serialize object item.

// Serialize an array of form elements or a set of

// key/values into a query string

// If value is a function, invoke it and use its return value

// If an array was passed in, assume that it is an array of form elements.

// Serialize the form elements

// If traditional, encode the "old" way (the way 1.3.2 or older

// did it), otherwise encode params recursively.

// Return the resulting serialization

// Can add propHook for "elements" to filter or add form elements

// Use .is( ":disabled" ) so that fieldset[disabled] works

/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */

/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */

// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression

// Anchor tag for parsing the document origin

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

// dataTypeExpression is optional and defaults to "*"

// For each dataType in the dataTypeExpression

// Prepend if requested

// Base inspection function for prefilters and transports

// A special extend for ajax options

// that takes "flat" options (not to be deep extended)

// Fixes #9887

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */

// Counter for holding the number of active queries

// Last-Modified header cache for next request

/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

// Data converters

// Keys separate source (or catchall "*") and destination types with a single space

// Convert anything to text

// Text to html (true = no transformation)

// Evaluate text as a json expression

// Parse text as xml

// For options that shouldn't be deep extended:

// you can add your own custom options here if

// and when you create one that shouldn't be

// deep extended (see ajaxExtend)

// Creates a full fledged settings object into target

// with both ajaxSettings and settings fields.

// If target is omitted, writes into ajaxSettings.

// Building a settings object

// Extending ajaxSettings

// Main method

// If url is an object, simulate pre-1.5 signature

// Force options to be an object

// URL without anti-cache param

// Response headers

// timeout handle

// Url cleanup var

// Request state (becomes false upon send and true upon completion)

// To know if global events are to be dispatched

// Loop variable

// uncached part of the url

// Create the final options object

// Callbacks context

// Context for global events is callbackContext if it is a DOM node or jQuery collection

// Deferreds

// Status-dependent callbacks

// Headers (they are sent all at once)

// Default abort message

// Fake xhr

// Builds headers hashtable if needed

// Raw string

// Caches the header

// Overrides response content-type header

// Execute the appropriate callbacks

// Lazy-add the new callbacks in a way that preserves old ones

// Cancel the request

// Attach deferreds

// A cross-domain request is in order when the origin doesn't match the current origin.

// Add protocol if not provided (prefilters might expect it)

// Handle falsy url in the settings object (#10093: consistency with old signature)

// We also use the url parameter if available

// Alias method option to type as per ticket #12004

// Extract dataTypes list

// Support: IE <=8 - 11, Edge 12 - 15

// IE throws exception on accessing the href property if url is malformed,

// e.g. http://example.com:80x/

// Support: IE <=8 - 11 only

// Anchor's host property isn't correctly set when s.url is relative

// If there is an error parsing the URL, assume it is crossDomain,

// it can be rejected by the transport if it is invalid

// Convert data if not already a string

// If request was aborted inside a prefilter, stop there

// Apply prefilters

// We can fire global events as of now if asked to

// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)

// Check for headers option

// Watch for a new set of requests

// Uppercase the type

// Determine if request has content

// Save the URL in case we're toying with the If-Modified-Since

// and/or If-None-Match header later on

// Remove hash to simplify url manipulation

// More options handling for requests with no content

// Remember the hash so we can put it back

// If data is available and should be processed, append data to url

// #9682: remove data so that it's not used in an eventual retry

// Add or update anti-cache param if needed

// Put hash and anti-cache on the URL that will be requested (gh-1732)

// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.

// Set the correct header, if data is being sent

// Set the Accepts header for the server, depending on the dataType

// Allow custom headers/mimetypes and early abort

// Abort if not done already and return

// Aborting is no longer a cancellation

// If no transport, we auto-abort

// Install callbacks on deferreds

// Get transport

// If request was aborted inside ajaxSend, stop there

// Send global event

// Timeout

// Rethrow post-completion exceptions

// Propagate others as results

// Callback for when everything is done

// Ignore repeat invocations

// Clear timeout if it exists

// Dereference transport for early garbage collection

// (no matter how long the jqXHR object will be used)

// Cache response headers

// Set readyState

// Determine if successful

// Get response data

// Remove auto dataType and get content-type in the process

// Check if we're dealing with a known content-type

// Check to see if we have a response for the expected dataType

// Try convertible dataTypes

// Or just use first one

// If we found a dataType

// We add the dataType to the list if needed

// and return the corresponding response

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */

// Use a noop converter for missing script

// Convert no matter what (that way responseXXX fields are always set)

// Work with a copy of dataTypes in case we need to modify it for conversion

// Create converters map with lowercased keys

// Convert to each sequential dataType

// Apply the dataFilter if provided

// There's only work to do if current dataType is non-auto

// Convert response if prev dataType is non-auto and differs from current

// If none found, seek a pair

// Seek a direct converter

// If conv2 outputs current

// If prev can be converted to accepted input

// Condense equivalence converters

// Apply converter (if not an equivalence)

// Unless errors are allowed to bubble, catch and return them

// If successful, handle type chaining

// if no content

// Extract error from statusText and normalize for non-aborts

// Set data for the fake xhr object

// Success/Error

// Complete

// Handle the global AJAX counter

// The url can be an options object (which then must have .url)

// Shift arguments if data argument was omitted

// Make this explicit, since user can override this through ajaxSetup (#11264)

// Only evaluate the response if it is successful (gh-4126)

// dataFilter is not invoked for failure responses, so using it instead

// of the default converter is kludgy but it works.

// The elements to wrap the target around

// File protocol always yields status code 0, assume 200

// #1450: sometimes IE returns 1223 when it should be 204

// Cross domain only allowed if supported through XMLHttpRequest

// Apply custom fields if provided

// Override mime type if needed

// Set headers

// X-Requested-With header

// For cross-domain requests, seeing as conditions for a preflight are

// akin to a jigsaw puzzle, we simply never set it to be sure.

// (it can always be set on a per-request basis or even using ajaxSetup)

// For same-domain requests, won't change header if already provided.

// Callback

// On a manual native abort, IE9 throws

// errors on any property access that is not readyState

// File: protocol always yields status 0; see #8605, #14207

// IE9 has no XHR2 but throws on binary (trac-11426)

// For XHR2 non-text, let the caller handle it (gh-2498)

// Listen to events

// Use onreadystatechange to replace onabort

// to handle uncaught aborts

// Check readyState before timeout as it changes

// Allow onerror to be called first,

// but that will not handle a native abort

// Also, save errorCallback to a variable

// as xhr.onerror cannot be accessed

// Create the abort callback

// Do send the request (this may raise an exception)

// #14683: Only rethrow if this hasn't been notified as an error yet

// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

// Install script dataType

// Handle cache's special case and crossDomain

// Bind script tag hack transport

// This transport only deals with cross domain or forced-by-attrs requests

// Use native DOM manipulation to avoid our domManip AJAX trickery

// Default jsonp settings

// Detect, normalize options and install callbacks for jsonp requests

// Handle iff the expected data type is "jsonp" or we have a parameter to set

// Delegate to script

// Get callback name, remembering preexisting value associated with it

// Insert callback into url or form data

// Use data converter to retrieve json after script execution

// Force json dataType

// Install callback

// Clean-up function (fires after converters)

// If previous value didn't exist - remove it

// Save back as free

// Make sure that re-using the options doesn't screw things around

// Save the callback name for future use

// Call if it was a function and we have a response

// Support: Safari 8 only

// In Safari 8 documents created via document.implementation.createHTMLDocument

// collapse sibling forms: the second one becomes a child of the first one.

// Because of that, this security measure has to be disabled in Safari 8.

// https://bugs.webkit.org/show_bug.cgi?id=137337

// Argument "data" should be string of html

// context (optional): If specified, the fragment will be created in this context,

// defaults to document

// keepScripts (optional): If true, will include scripts passed in the html string

// Single tag

// Stop scripts or inline event handlers from being executed immediately

// by using document.implementation

// Set the base href for the created document

// so any parsed elements with URLs

// are based on the document's URL (gh-2965)

/**
 * Load a url into a page
 */

// If it's a function

// We assume that it's the callback

// If we have elements to modify, make the request

// If "type" variable is undefined, then "GET" method will be used.

// Make value of this field explicit since

// user can override it through ajaxSetup method

// Save response for use in complete callback

// If a selector was specified, locate the right elements in a dummy div

// Exclude scripts to avoid IE 'Permission Denied' errors

// Otherwise use the full result

// Set position first, in-case top/left are set even on static elem

// Need to be able to calculate position if either

// top or left is auto and position is either absolute or fixed

// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)

// offset() relates an element's border box to the document origin

// Preserve chaining for setter

// Return zeros for disconnected and hidden (display: none) elements (gh-2310)

// Running getBoundingClientRect on a

// disconnected node in IE throws an error

// Get document-relative position by adding viewport scroll to viewport-relative gBCR

// position() relates an element's margin box to its offset parent's padding box

// This corresponds to the behavior of CSS absolute positioning

// position:fixed elements are offset from the viewport, which itself always has zero offset

// Assume position:fixed implies availability of getBoundingClientRect

// Account for the *real* offset parent, which can be the document or its root element

// when a statically positioned element is identified

// Incorporate borders into its offset, since they are outside its content origin

// Subtract parent offsets and element margins

// This method will return documentElement in the following cases:

// 1) For the element inside the iframe without offsetParent, this method will return

//    documentElement of the parent window

// 2) For the hidden or detached element

// 3) For body or html element, i.e. in case of the html node - it will return itself

// but those exceptions were never presented as a real life use-cases

// and might be considered as more preferable results.

// This logic, however, is not guaranteed and can change at any point in the future

// Create scrollLeft and scrollTop methods

// Coalesce documents and windows

// Support: Safari <=7 - 9.1, Chrome <=37 - 49

// Add the top/left cssHooks using jQuery.fn.position

// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084

// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347

// getComputedStyle returns percent when specified for top/left/bottom/right;

// rather than make the css module depend on the offset module, just check for it here

// If curCSS returns percentage, fallback to offset

// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

// Margin is only for outerHeight, outerWidth

// Get document width or height

// Get width or height on the element, requesting but not forcing parseFloat

// Set width or height on the element

// ( namespace ) or ( selector, types [, fn] )

// Handle event binding

// Support: Android <=4.0 only

// Make sure we trim BOM and NBSP

// Bind a function to a context, optionally partially applying any

// arguments.

// jQuery.proxy is deprecated to promote standards (specifically Function#bind)

// However, it is not slated for removal any time soon

// Quick check to determine if target is callable, in the spec

// this throws a TypeError, but we will just return undefined.

// Simulated bind

// Set the guid of unique handler to the same of original handler, so it can be removed

// As of jQuery 3.0, isNumeric is limited to

// strings and numbers (primitives or objects)

// that can be coerced to finite numbers (gh-2662)

// parseFloat NaNs numeric-cast false positives ("")

// ...but misinterprets leading-number strings, particularly hex literals ("0x...")

// subtraction forces infinities to NaN

// Map over jQuery in case of overwrite

// Map over the $ in case of overwrite

// Expose jQuery and $ identifiers, even in AMD

// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)

// and CommonJS for browser emulators (#13566)

/* 1 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 2 */

/* WEBPACK VAR INJECTION */

/* unused harmony export parse */

/* unused harmony export findIconDefinition */

/* unused harmony export icon */

/* unused harmony export noAuto */

/* unused harmony export config */

/* unused harmony export toHtml */

/* unused harmony export layer */

/* unused harmony export text */

/* unused harmony export counter */

/* harmony export (binding) */

// Getting an empty string will occur if the attribute is set on the HTML tag but without a value

// We'll assume that this is an indication that it should be toggled to true

// For example <script data-search-pseudo-elements src="..."></script>

// run promise callbacks

// reset async asyncQueue

// then should be retrieved only once

/**
 * @class
 */

// already resolved, call callback async

// subscribe

/**
   * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
   * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
   * for `fas` so we'll easy the upgrade process for our users by automatically defining
   * this as well.
   */

// If we already have a replaced node we do not want to continue nesting within it.

// Short-circuit to the standard replacement

// noop

// This node is already being processed

// If we've already processed it but the current computed style does not result in a font-family,

// that probably means that a class name that was previously present to make the icon has been

// removed. So we now should delete the icon.

// Only convert the pseudo element in this :before/:after position into an icon if we haven't

// already done so with the same prefix and iconName

// Delete the old one, since we're replacing it with a new one

/*#__PURE__*/

/* 3 */

/* harmony import */

/* 4 */

/* 5 */

// Test for IE <= 9 as proposed by Browserhacks

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// Tests for existence of standard globals is to allow style-loader

// to operate correctly into non-standard environments

// @see https://github.com/webpack-contrib/style-loader/issues/177

// Special case to return head of iframe instead of iframe itself

// This will throw an exception if access to iframe is blocked

// due to cross-origin restrictions

// istanbul ignore next

/* istanbul ignore next  */

// For old IE

/* istanbul ignore if  */

// istanbul ignore if

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// tags it will allow on a page

/* 6 */

// extracted by mini-css-extract-plugin

/* 7 */

/*!
  * Bootstrap v4.5.0 (https://getbootstrap.com/)
  * Copyright 2011-2020 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */

/**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */

// eslint-disable-next-line no-bitwise

// "~~" acts like a faster Math.floor() here

// Get transition-duration of the element

// Return 0 if element or transition duration is not found

// If multiple durations are defined, take the first

// TODO: Remove in v5

// Shoutout AngusCroll (https://goo.gl/pxwQGp)

// Can find the shadow root otherwise it'll return the document

// when we don't find a shadow root

// eslint-disable-line prefer-rest-params

/**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

// Getters

// Public

// Private

// Static

/**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

/**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

// if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input

// work around Firefox bug #1540995

// ensure correct active class is set to match the controls' actual values/states

// find all checkboxes/readio buttons inside data-toggle groups

// find all button toggles

// Don't call next when the page isn't visible

// or the carousel or its parent isn't visible

// swipe left

// swipe right

// If it's a touch-enabled device, mouseenter/leave are fired as

// part of the mouse compatibility events on first tap - the carousel

// would stop cycling until user tapped out of it;

// here, we listen for touchend, explicitly pause the carousel

// (as if it's the second time we tap on it, mouseenter compat event

// is NOT fired) and after a timeout (to allow for mouse compatibility

// events to fire) we explicitly restart cycling

// ensure swiping with one touch and not pinching

// Coerce string values

// It's a jQuery object

// preventDefault only for <a> elements (which change the URL) not inside the collapsible element

// Disable totally Popper.js for Dropdown in Navbar

/**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */

// Check if it's jQuery element

// If boundary is not `scrollParent`, then set position to `static`

// to allow the menu to "escape" the scroll parent's boundaries

// https://github.com/twbs/bootstrap/issues/24251

// If this is a touch-enabled device we add extra

// empty mouseover listeners to the body's immediate children;

// only needed because of broken event delegation on iOS

// https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

// Handle dropup

// Disable Popper.js if we have a static display

// If this is a touch-enabled device we remove the extra

// empty mouseover listeners we added for iOS support

// eslint-disable-next-line complexity

// If not input/textarea:

//  - And not a key in REGEXP_KEYDOWN => not a dropdown command

// If input/textarea:

//  - If space key => not a dropdown command

//  - If key is other than escape

//    - If key is not up or down => not a dropdown command

//    - If trigger inside the menu => not a dropdown command

// Up

// Down

/**
       * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`
       * Do not move `document` in `htmlElements` array
       * It will remove `EVENT_CLICK_DATA_API` event that should remain
       */

// Don't move modal's DOM position

// ----------------------------------------------------------------------

// the following methods are used to handle overflowing modals

// todo (fat): these should probably be refactored out of modal.js

// Note: DOMNode.style.paddingRight returns the actual value or '' if not set

//   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set

// Adjust fixed content padding

// Adjust sticky content margin

// Adjust body padding

// Restore fixed content padding

// Restore sticky content

// Restore body padding

// thx d.walsh

/**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.5.0): tools/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */

// Global attributes allowed on any supplied element below.

// Check if a regular expression validates the attribute.

// private

// Protected

// Content is a DOM node or a jQuery

/**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.5.0): util.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */

/**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */

// Overrides

// We use append for html objects to maintain js events

// TODO (fat): remove sketch reliance on jQuery position/offset

// Set triggered link as active

// Set triggered links parents as active

// With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

// Handle special case when .nav-link is inside .nav-item

//# sourceMappingURL=bootstrap.js.map

/* 8 */

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */

// NOTE: 1 DOM access here

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */

// Return body, `getScroll` will take care to get the correct `scrollTop` from it

// Firefox want us to check `-x` and `-y` variations as well

/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */

// Skip hidden elements which don't have an offsetParent

// .offsetParent will return the closest TH, TD or TABLE in case

// no offsetParent is present, I hate this job...

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */

// This check is needed to avoid errors in case one of the elements isn't defined for any reason

// Here we make sure to give as "start" the element that comes first in the DOM

// Both nodes are inside #document

// one of the nodes is inside shadowDOM, find which one

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */

// IE10 10 FIX: Please, don't ask, the element isn't

// considered in DOM in some circumstances...

// This isn't reproducible in IE10 compatibility mode of IE11

// subtract scrollbar size from sizes

// if an hypothetical scrollbar is detected, we must be sure it's not a `border`

// we make this check conditional for performance reasons

// In cases where the parent is fixed, we must ignore negative scroll in offset calc

// Subtract margins of documentElement in case it's being used as parent

// we do this only on HTML because it's the only element that behaves

// differently when margins are applied to it. The margins are included in

// the box of the documentElement, in the other cases not.

// Attach marginTop and marginLeft because in some circumstances we may need them

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */

// Handle viewport case

// Handle other cases based on DOM element used as boundaries

// In case of HTML, we need a different computation

// for all the other DOM elements, this one is good

// Add paddings

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */

// Get popper node sizes

// Add position, width and height to our offsets object

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

// use native find if supported

// use `filter` to obtain the same behavior of `find`

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */

// use native findIndex if supported

// use `find` + `indexOf` if `findIndex` isn't supported

// eslint-disable-line dot-notation

// Add properties to offsets to make them a complete clientRect object

// we do this before each modifier to make sure the previous one doesn't

// mess with these values

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */

// if popper is destroyed, don't perform any further update

// compute reference element offsets

// compute auto placement, store placement inside the data object,

// modifiers will be able to edit `placement` if needed

// and refer to originalPlacement to know the original value

// store the computed placement inside `originalPlacement`

// compute the popper offsets

// run the modifiers

// the first `update` will call `onCreate` callback

// the other ones will call `onUpdate` callback

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */

// touch DOM only if `applyStyle` modifier is enabled

// remove the popper if user explicitly asked for the deletion on destroy

// do not use `remove` because IE11 doesn't support it

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

// Resize event listener on window

// Scroll event listener on scroll parents

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */

// Remove resize event listener on window

// Remove scroll event listener on scroll parents

// Reset state

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

// add unit if the value is numeric and is one of the following

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */

// Get rid of `auto` `auto-start` and `auto-end`

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */

// Use height if placement is left or right and index is 0 otherwise use width

// in this way the first offset will use an axis and the second one

// will use the other one

// If divider is found, we divide the list of values and operands to divide

// them by ofset X and Y.

// Convert the values with units to absolute pixels to allow our computations

// Loop trough the offsets arrays and execute the operations

// Most of the units rely on the orientation of the popper

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */

// separate value from unit

// If it's not a number it's an operator, I guess

// if is an explicit pixel unit, we get rid of the unit and keep the value

// if is an implicit unit, it's px, and we return just the value

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */

/**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */

/**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */

/**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */

/**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */

/**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */

/**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */

/**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */

/**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=100 - Index used to define the order of execution */

/** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */

/** @prop {ModifierFn} */

// if shift shiftvariation is specified, run the modifier

/**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=200 - Index used to define the order of execution */

/** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */

/**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=300 - Index used to define the order of execution */

// If offsetParent is the reference element, we really want to

// go one step up and use the next offsetParent as reference to

// avoid to make this modifier completely useless and look like broken

// NOTE: DOM access here

// resets the popper's position so that the document size can be calculated excluding

// the size of the popper element itself

// restores the original style properties after the offsets have been computed

/**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */

/**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */

/**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */

/**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=400 - Index used to define the order of execution */

/**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=500 - Index used to define the order of execution */

// arrow depends on keepTogether in order to work

// if arrowElement is a string, suppose it's a CSS selector

// if arrowElement is not found, don't run the modifier

// if the arrowElement isn't a query selector we must check that the

// provided DOM node is child of its popper node

// extends keepTogether behavior making sure the popper and its

// reference have enough pixels in conjunction

// top/left side

// bottom/right side

// compute center of the popper

// Compute the sideValue using the updated popper offsets

// take popper margin in account because we don't have this info available

// prevent arrowElement from being placed not contiguously to its popper

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */

/** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */

/**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=600 - Index used to define the order of execution */

// if `inner` modifier is enabled, we can't use the `flip` modifier

// seems like flip is trying to loop, probably there's not enough space on any of the flippable sides

// this boolean to detect any flip loop

// this object contains `position`, we want to preserve it along with

// any additional property we may add in the future

/**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */

/**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */

/**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */

/**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */

/**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */

/**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=700 - Index used to define the order of execution */

/** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */

/**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=800 - Index used to define the order of execution */

// Avoid unnecessary DOM access if visibility hasn't changed

/**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=850 - Index used to define the order of execution */

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */

// when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)

// and not the bottom of the html element

// othwerise, we use the standard `top`, `left`, `bottom` and `right` properties

// Attributes

// Update `data` attributes, styles and arrowStyles

/**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

/**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */

/**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */

/**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=900 - Index used to define the order of execution */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */

// any property present in `data.styles` will be applied to the popper,

// in this way we can make the 3rd party modifiers add custom styles to it

// Be aware, modifiers could override the properties defined in the previous

// lines of this modifier!

// any property present in `data.attributes` will be applied to the popper,

// they will be set as HTML attributes of the element

// if arrowElement is defined and arrowStyles has some properties

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */

/** @prop {Function} */

// Apply `position` to popper before anything else because

// without the position applied we can't guarantee correct computations

/**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

/**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */

// make update() debounced, so that it only runs at most once-per-tick

// with {} we create a new object with the options inside it

// init state

// get reference and popper elements (allow jQuery wrappers)

// Deep merge modifiers options

// Refactoring modifiers' list (Object => Array)

// modifiers have the ability to execute arbitrary code when Popper.js get inited

// such code is executed in the same order of its modifier

// they could add new properties to their options configuration

// BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!

// fire the first update to position the popper in the right place

// setup event listeners, they will take care of update the position in specific situations

// We can't use class properties because they don't get listed in the

// class prototype and break stuff like Sinon stubs

/**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */

/**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */

/* harmony default export */

/* 9 */

// DOM APIs, for completeness

// Does not start the time, just sets up the members needed.

// setimmediate attaches itself to the global object

// On some exotic environments, it's not clear which object `setimmediate` was

// able to install onto.  Search each possibility in the same order as the

// `setimmediate` library.

/* 10 */

// Spec says greater than zero

// Don't get fooled by e.g. browserify environments.

// The test against `importScripts` prevents this implementation from being installed inside a web worker,

// where `global.postMessage` means something completely different and can't be used for this purpose.

// For web workers, where supported

// For IE 6–8

// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted

// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.

// For non-IE10 modern browsers

// Callback can either be a function or a string

// Copy function arguments

// Store and register the task

// From the spec: "Wait until any invocations of this algorithm started before this one have completed."

// So if we're currently running a task, we'll need to delay this invocation.

// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a

// "too much recursion" error.

/* 11 */

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* 12 */

// ESM COMPAT FLAG

// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js

// CONCATENATED MODULE: ./src/js/App.js

/* 13 */

/* 14 */

//# sourceMappingURL=ekko-lightbox.min.js.map
