<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[TOKOROM BLOG]]></title>
  <link href="http://www.tokoro.me/atom.xml" rel="self"/>
  <link href="http://www.tokoro.me/"/>
  <updated>2012-07-29T17:04:28+09:00</updated>
  <id>http://www.tokoro.me/</id>
  <author>
    <name><![CDATA[Yuta ToKoRo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[JenkinsにBitbucketからビルド命令を出す際にIDとPasswordを埋め込まないようにする]]></title>
<link href="http://www.tokoro.me/2012/07/29/security-for-jenkins/"/>
<updated>2012-07-29T16:00:00+09:00</updated>
<id>http://www.tokoro.me/2012/07/29/security-for-jenkins</id>

      <content type="html"><![CDATA[<!-- more -->


<p><a href="http://www.tokoro.me/2012/07/29/jenkins-octopress/">前の記事</a>でBitbucketにpushしたのをトリガーにJenkinsでOctopressをデプロイするというのをやったのだが、このときは認証なしでJobの実行できるようになってしまっていた。<br/>
つまりこのままだと自分のJenkinsは認証なしで全てのJobが実行できてしまうという状態でよろしくない。<br/>
ひとつの解決索としてビルド命令用のユーザを作り、そのIDとPasswordをURLに直接埋め込んでしまうという方法も考えられるが、今回はそれを極力しない方向でがんばりたいと思う。</p>

<h2>JenkinsにBitbucketからアクセスするためのユーザを追加</h2>

<p>まずはBitbucketからJenkinsにアクセスする専用のユーザを作る。</p>

<p>※ ユーザの追加方法については <a href="https://wiki.jenkins-ci.org/display/JA/Standard+Security+Setup">このあたり</a> を参照</p>

<p>今回は、<strong>bitbucket</strong> というユーザを追加した。</p>

<p>また、 <strong>Manage Jenkins</strong> -> <strong>Configure System</strong> で、</p>

<ul>
<li>Access Control

<ul>
<li>Authorization

<ul>
<li>Matrix-based security

<ul>
<li>bitbucketユーザに <strong>Job</strong> の <strong>Read</strong> だけチェック</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>としておいて、bitbucketユーザが最低限のことのみ可能なように設定しておく。</p>

<p>このとき、Anonymousユーザの <strong>Job</strong> の <strong>Read</strong> にチェックがついていれば外しておく。</p>

<h2>Jenkinsへのビルド命令専用のドメインを追加</h2>

<p>これまでは <code>jenkins.yourdomain</code> というドメインでJenkinsにアクセスさせていたとして、ビルド命令専用の <code>push-to-jenkins.yourdomain</code> を追加した。<br/>
これはnginxが外部からのビルド命令だと分かるようにするための目印としての意味合いなので、ドメインを追加する以外の方法でも良い。</p>

<h2>nginxに設定追加</h2>

<p>nginxのconfに、以下のように<code>push-to-jenkins.yourdomain</code>へのアクセスをBasic認証つきでローカルのJenkinsのURLに委譲するよう設定を追加する。</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>server {
</span><span class='line'>    listen 80;
</span><span class='line'>    server_name push-to-jenkins.yourdomain;
</span><span class='line'>    location / {
</span><span class='line'>        proxy_pass http://localhost:8080;
</span><span class='line'>        proxy_set_header Authorization "Basic XXXXXX";
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><strong>XXXXXX</strong> の部分には実際には <strong>bitbucket:yourpassword</strong> というBasic認証のIDとPasswordの文字列をBase64エンコードした文字列を入れる必要がある。<br/>
Base64エンコードの方法が分からない場合は <a href="http://www.ahref.org/app/base64/base64.cgi">このあたり</a> のサイトでエンコードした文字列をGETするのが手っ取り早い。</p>

<p>設定後にnginxを再起動しておくこと。</p>

<h2>Bitbucketのほうの設定</h2>

<p>該当リポジトリの <strong>Admin</strong> タブの <strong>Services</strong> を選択。</p>

<p>POSTの設定項目を</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>http://push-to-jenkins.yourdomain/job/deploy-octopress/build?token=a-word-you-like</span></code></pre></td></tr></table></div></figure>


<p>に変更しておく。</p>

<h2>おしまい</h2>

<p>以上の設定がうまく言っていれば、Bitbucketへの<code>git push origin source</code>でOctopressのデプロイが自動的にできるはず。<br/>
また、このときベーシック認証のIDとPasswordがインターネット上にさらされることもない。</p>
<p><a rel="bookmark" href="http://www.tokoro.me/2012/07/29/security-for-jenkins/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Jenkins@さくらVPSにOctopressのデプロイを任せてみる]]></title>
<link href="http://www.tokoro.me/2012/07/29/jenkins-octopress/"/>
<updated>2012-07-29T15:50:00+09:00</updated>
<id>http://www.tokoro.me/2012/07/29/jenkins-octopress</id>

      <content type="html"><![CDATA[<!-- more -->


<h2>ゴール</h2>

<p>Octopressで記事を書いたあと、 <strong>Bitbucket</strong> に <code>git push origin source</code> とするだけで <strong>Github Pages</strong> に勝手にデプロイされるようにする。</p>

<h2>事前準備</h2>

<ul>
<li>Github PagesにOctopressでブログを投稿できるようにしておく => まだなら <a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">このあたりを参照</a></li>
<li>さくらVPSを使えるようにしておく</li>
<li>さくらVPSにJenkinsをインストールしておく => まだなら <a href="http://www.tokoro.me/2012/07/24/install-jenkins-to-sakura/">こちらを参照</a></li>
<li>さくらVPSでGitを使えるようにしておく => まだなら <a href="http://blog.araishi.com/sakura-vps-git-yum-install/">こちらを参照</a></li>
<li>Githubを使えるようにしておく</li>
<li>Bitbucketを使えるようにしておく</li>
</ul>


<h2>Jenkinsに入れておく必要のあるPlugin</h2>

<ul>
<li>RVM Plugin</li>
</ul>


<h2>システム構成</h2>

<h2>アクティビティ図</h2>

<h2>JenkinsからBitbucketとGithubにアクセスできるようにする</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ cd /var/lib/jenkins
</span><span class='line'>$ sudo -u jenkins -H /usr/local/bin/git config --global user.email "jenkins@your.domain"
</span><span class='line'>$ sudo -u jenkins -H /usr/local/bin/git config --global user.name "jenkins"
</span><span class='line'>$ sudo -u jenkins -H ssh-keygen -t rsa -C jenkins@your.domain</span></code></pre></td></tr></table></div></figure>


<p>でJenkins用の秘密鍵と公開鍵を作る。
このとき、パスフレーズを設定しないように注意。</p>

<p>これで <em>/var/lib/jenkins/.ssh/id_rsa.pub</em> という公開鍵ができているはずなので、この公開鍵を <strong>Github</strong> と <strong>Bitbucket</strong> に登録しておく。</p>

<p>ちなみに公開鍵の中身を</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo -u jenkins -H more .ssh/id_rsa.pub</span></code></pre></td></tr></table></div></figure>


<p>などで表示し、表示された文字列をそのまま <strong>Github</strong> や <strong>Bitbucket</strong> にコピペすればOK。</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo -u jenkins mkdir tmp 
</span><span class='line'>$ cd tmp
</span><span class='line'>$ sudo -u jenkins /usr/local/bin/git clone git@bitbucket.org:yourname/yourname.github.com.git
</span><span class='line'>$ sudo -u jenkins /usr/local/bin/git clone git@github.com:yourname/yourname.github.com.git</span></code></pre></td></tr></table></div></figure>


<p>で実際に <strong>Bitbucket</strong> と <strong>Github</strong> からcloneをすると、それぞれ一度目に限り yes/no が問われるのでそこでyesとしておく必要がある（そうしないとJenkinsから使えない）。</p>

<h2>JenkinsからRVMを使えるようにする</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ cd /var/lib/jenkins
</span><span class='line'>$ sudo -u jenkins -H -s bash -c 'bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )'
</span><span class='line'>$ sudo -u jenkins -H -s bash -c 'source ~/.rvm/scripts/rvm; rvm pkg install readline zlib openssl' 
</span><span class='line'>$ sudo -u jenkins -H -s bash -c 'source ~/.rvm/scripts/rvm; rvm install 1.9.2 -C --with-openssl-dir=~/.rvm/usr --with-readline-dir=~/.rvm/usr --with-zlib-dir=~/.rvm/usr'</span></code></pre></td></tr></table></div></figure>


<p>で、jenkinsユーザでRVMでインストールしたRubyが使えるようになる。</p>

<p>実際にRubyが使えるかどうかは</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo -u jenkins -H -s bash -c 'source ~/.rvm/scripts/rvm; ruby -v'</span></code></pre></td></tr></table></div></figure>


<p>などで確認できる。</p>

<h2>gemsetを作成して必要なgemのインストール</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo -u jenkins -H -s bash -c 'source ~/.rvm/scripts/rvm; rvm gemset create octopress'
</span><span class='line'>$ sudo -u jenkins -H -s bash -c 'source ~/.rvm/scripts/rvm; rvm use 1.9.2@octopress; gem install bundle'</span></code></pre></td></tr></table></div></figure>


<p>octopress用のoctopressというgemsetを作って、そこに <strong>bundle</strong> をインストールしておく。</p>

<h2>JenkinsのJobの設定</h2>

<p><em>Build a free-style software project</em> をベースに設定した項目は以下のとおり。</p>

<ul>
<li>Project name

<ul>
<li><strong>deploy-octopress</strong> (お好みのジョブ名を設定)</li>
</ul>
</li>
<li>Source Code Management

<ul>
<li><strong>None</strong> (Gitからソースを取得するところを含めてコマンドでやってしまうため)</li>
</ul>
</li>
<li>Build Triggers

<ul>
<li><strong>Trigger builds remotely</strong>

<ul>
<li>Authentication Token: <strong>a-word-you-like</strong> (適当なワードを指定する)</li>
</ul>
</li>
</ul>
</li>
<li>Build Environment

<ul>
<li>Run the build in a RVM-managed environment

<ul>
<li>Implementation: <strong>1.9.2@octopress</strong> (利用するRubyバージョンとgemset名を設定)</li>
</ul>
</li>
</ul>
</li>
<li>Executable shell

<ul>
<li>Command</li>
</ul>
</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>export PATH=$PATH:/usr/local/bin
</span><span class='line'>
</span><span class='line'>rm -rf octopress
</span><span class='line'>mkdir octopress
</span><span class='line'>cd octopress
</span><span class='line'>
</span><span class='line'>git init
</span><span class='line'>git remote add -t source origin git@bitbucket.org:yourname/yourname.github.com.git
</span><span class='line'>git fetch
</span><span class='line'>git checkout source
</span><span class='line'>
</span><span class='line'>bundle install
</span><span class='line'>
</span><span class='line'>rake setup_github_pages\[git@github.com:yourname/yourname.github.com.git\]
</span><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>最後の <em>Command</em> のところでは、</p>

<ul>
<li>作業ディレクトリを作り直す</li>
<li>Bitbucketのリポジトリからsourceブランチを取得</li>
<li>bundleで必要なgemなどをインストール</li>
<li>generate &amp; デプロイ!</li>
</ul>


<p>をしている。</p>

<h2>BitbucketからJobの実行ができるように権限の設定を変更をする</h2>

<p>BitbucketからJenkinsにアクセスする際に、 <em>http://jenkins.yourdomain/job/deploy-octopress/build?token=a-word-you-like</em> といったURLを叩いてJobを実行することになるので、それが可能なように権限の設定を変更しておく（<strong>この方法は簡易的なものでセキュリティの面では良くないので、これを解消するには<a href="http://www.tokoro.me/2012/07/29/security-for-jenkins/">次の記事</a>を参照して別の設定とするのが良い</strong>）。</p>

<p>また、 <strong>Manage Jenkins</strong> -> <em>Configure System</em> で、</p>

<ul>
<li>Access Control

<ul>
<li>Authorization

<ul>
<li>Matrix-based security

<ul>
<li>Anonymousユーザの <strong>Job</strong> の <strong>Read</strong> だけチェック</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Bitbucketのほうの設定</h2>

<p>作成したリポジトリの <strong>Admin</strong> タブの <strong>Services</strong> を選択。</p>

<p><em>Select a service&#8230;</em> の中に <em>Jenkins</em> があるのでそれを選択して、 <strong>Add service</strong>。</p>

<p>設定項目には、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>http://jenkins.yourdomain/job/deploy-octopress/build?token=a-word-you-like</span></code></pre></td></tr></table></div></figure>


<p>と叩くべきURLをそのまま設定する (※ yourdomainなどは各自の環境に合わせて変更すること)。</p>

<h2>完成!</h2>

<p>これでひととおりの設定は完了。<br/>
うまくいっていればいつもどおり記事を書いてコミットした後に <code>git push origin source</code> とBitbucketにpushするだけで、あとは勝手にデプロイしてくれる。<br/>
このとき、Bitbucketのプライベートリポジトリにファイル一式がバックアップされることにもなる。</p>

<p>なお、sourceブランチがデプロイの対象となっているので、書き途中の記事をBitbucketに保存しておきたい場合には、 <strong>draft</strong> など別のブランチにコミットしておけば書き途中のものが勝手にデプロイされる心配はない。</p>

<h2>課題</h2>

<p>このままだと、認証なしで全てのJobが参照できる形になってしまっている。<br/>
<a href="http://www.tokoro.me/2012/07/29/security-for-jenkins/">次の記事</a>ではこれを解消することにトライしたい。</p>

<h2>じつは途中ではいろいろと引っかかった</h2>

<p>以上、うまくいった手順をまとめたが実際にはいろいろとひっかかったところがあったので、そこも言及しておく。</p>

<h3>.rvmrc の実行許可の確認が越えられない</h3>

<p>はじめて <em>.rvmrc</em> が設置されたディレクトリに入る際、 <em>.rvmrc</em> の内容を実行して良いか? といった問い合わせが入り、自分で操作しているときは単純に <strong>yes</strong> と応えるだけなのですが、それをJenkinsさんにやってもらう方法がわからなかった。<br/>
<code>rvmrc trust ディレクトリ名</code>とすれば以降その確認がいらなくなるというのは既知なのだが、Git Plugin を使ってソースを取得すると、その時点でcloneしたディレクトリに入ってしまうのでタイミング的にそれも無理。<br/>
けっきょくGit Pluginを使うのをあきらめ、ソースのcloneからブランチの切り替えまでコマンドで直接やることとした。</p>

<h3>RVMがうまく扱えない</h3>

<p>ビルド時のコマンドの中で <strong>rvm</strong> を使っているわけですが、やたらとこのコマンドがないといったエラーが出まくり「うぎゃー」となった。
これは <strong>RVM Plugin</strong> を使えば簡単に解決できた。</p>

<h3>gemがインストールできない</h3>

<p><strong>bundler</strong> を使うため、<code>gem install bundle</code>をビルド時のコマンド中に入れたのだが、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>ERROR:  Loading command: install (LoadError)
</span><span class='line'>    no such file to load -- zlib</span></code></pre></td></tr></table></div></figure>


<p>というエラーで先に進めない。</p>

<p>これはRubyのほうの話で、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo -u jenkins -H -s bash -c 'source ~/.rvm/scripts/rvm; rvm pkg install readline zlib openssl' 
</span><span class='line'>$ sudo -u jenkins -H -s bash -c 'source ~/.rvm/scripts/rvm; rvm reinstall 1.9.2'</span></code></pre></td></tr></table></div></figure>


<p>とzlibなどをRVMでインストールした後に、Rubyをreinstallすることで解決。<br/>
本記事のほうの手順ではきちんと先に <code>rvm pkg install</code> を済ませておくようにしてある。</p>

<h3>rake installに失敗する</h3>

<p>Jenkinsでの<code>rake install</code>時に</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>A theme is already installed, proceeding will overwrite existing files. Are you sure? [y/n]</span></code></pre></td></tr></table></div></figure>


<p>という確認が出てきたそこでこけていた模様。<br/>
よくよく考えてみると、<code>rake install</code>はこのリポジトリには適用済みの状態でpushしてあるので不要だった。</p>

<h3>rake generateでエラー</h3>

<p><code>rake generate</code>時に</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>Building site: source -> public
</span><span class='line'>/var/lib/jenkins/.rvm/gems/ruby-1.9.2-p320@octopress/gems/ffi-1.0.11/lib/ffi/library.rb:121:in `block in ffi_lib': Could not open library 'lib.so': lib.so: cannot open shared object file: No such file or directory (LoadError)</span></code></pre></td></tr></table></div></figure>


<p>といったエラーが発生。
これは <strong>python-devel</strong> が入っていない場合のエラーということだったので、さくらVPSのほうで <code>sudo yum install python-devel</code> しておくことで解消。</p>

<h3>rake deployでエラー</h3>

<p><code>rake deploy</code>時に</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>## Pushing generated _deploy website
</span><span class='line'>
</span><span class='line'>Host key verification failed.
</span><span class='line'>fatal: The remote end hung up unexpectedly</span></code></pre></td></tr></table></div></figure>


<p>といったエラーが発生。</p>

<p>公開鍵はきっちり登録してあるはずなのにおかしいなと思ったら、一度めのアクセスの際にアクセス確認の問い合わせが入り、ここでyesとしないと先に進まないという状態で止まっていたというオチ。<br/>
これはあらかじめさくらVPSのほうで、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo -u jenkins /usr/local/bin/git clone git@github.com:yourname/yourname.github.com.git</span></code></pre></td></tr></table></div></figure>


<p>と一度Githubにアクセスしておけば解消される。</p>

<h3>おしまい</h3>

<p>じつにJenkinsで自動デプロイするまでにかかったビルド試行回数は25回。</p>
<p><a rel="bookmark" href="http://www.tokoro.me/2012/07/29/jenkins-octopress/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[さくらVPSにJenkinsさんをインストールする]]></title>
<link href="http://www.tokoro.me/2012/07/24/install-jenkins-to-sakura/"/>
<updated>2012-07-24T02:57:00+09:00</updated>
<id>http://www.tokoro.me/2012/07/24/install-jenkins-to-sakura</id>

      <content type="html"><![CDATA[<!-- more -->


<h2>JDKのインストール</h2>

<p>Javaが未インストールならこちらから。</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo yum install java-1.6.0-openjdk java-1.6.0-openjdk-devel</span></code></pre></td></tr></table></div></figure>


<h2>Jenkinsのインストール</h2>

<p>基本的に <a href="http://pkg.jenkins-ci.org/redhat/">公式ページ</a> に書いてあるとおりにするだけ。</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
</span><span class='line'>$ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
</span><span class='line'>$ sudo yum install jenkins</span></code></pre></td></tr></table></div></figure>


<h2>Jenkinsの起動</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo service jenkins start</span></code></pre></td></tr></table></div></figure>


<p>これでインストールと起動が完了。簡単すぎる！</p>

<p>試しに</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ curl http://localhost:8080/</span></code></pre></td></tr></table></div></figure>


<p>とすると、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span><span class="nt">&lt;html&gt;&lt;head&gt;</span> <span class="nt">&lt;title&gt;</span>Dashboard [Jenkins]<span class="nt">&lt;/title&gt;</span>...
</span></code></pre></td></tr></table></div></figure>


<p>みたいなHTMLが出力されてJenkinsさんが動いているのを確認できるはず。</p>

<p>ついでにサーバ再起動時にJenkinsさんが自動で起動するようにしておく。</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo chkconfig jenkins on </span></code></pre></td></tr></table></div></figure>


<h2>nginxの設定</h2>

<p>まず、nginxが未インストールなら</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo yum install nginx</span></code></pre></td></tr></table></div></figure>


<p>でインストールしておく。</p>

<p>Jenkinsにnginx経由でアクセスするために、自分の場合は <strong>/etc/nginx/conf.d/virtual.conf</strong> に以下リバースプロキシの設定を加えた。</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>server {
</span><span class='line'>    listen 80;
</span><span class='line'>    server_name jenkins.自分の.ドメイン
</span><span class='line'>    location / {
</span><span class='line'>        proxy_pass http://localhost:8080;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ここでは、 <em>http://jenkins.自分の.ドメイン/</em> でアクセスされたら、 <em>http://localhost:8080/</em> に内部的に転送するよう設定している。
もし、独自ドメインを使えない場合には、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>server {
</span><span class='line'>    listen 80;
</span><span class='line'>    server_name 自分のVPSのドメイン
</span><span class='line'>    location /jenkins {
</span><span class='line'>        proxy_pass http://localhost:8080;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>のように設定して、 <em>http://自分のVPSのドメイン/jenkins/</em> でアクセスされたときにJenkinsさんに繋がるようにしたりするよう。</p>

<p>設定し終わり、nginxを再起動してブラウザで <em>*http://jenkins.自分の.ドメイン/</em> を表示すれば、晴れて</p>

<p><img src="http://dl.dropbox.com/u/10351676/images/install-jenkins.jpg" alt="install-jenkins" /></p>

<p>のようにJenkinsさんが使えるようになっているはず。</p>

<h2>Jenkinsへのアクセス制限</h2>

<p>ちなみにこのままだと誰からでもジョブなどが作成できてしまう状態のため、</p>

<p><a href="https://wiki.jenkins-ci.org/display/JA/Standard+Security+Setup">Standard Securiy Setup</a></p>

<p>を参照してアクセス制限をかけておくことを推奨。</p>
<p><a rel="bookmark" href="http://www.tokoro.me/2012/07/24/install-jenkins-to-sakura/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Octopressでソースコードの一部分だけを参照する]]></title>
<link href="http://www.tokoro.me/2012/07/15/octopress-part-of-codes/"/>
<updated>2012-07-15T16:55:00+09:00</updated>
<id>http://www.tokoro.me/2012/07/15/octopress-part-of-codes</id>

      <content type="html"><![CDATA[<!-- more -->


<h2>おさらい：Octopressでソースコードを表示する</h2>

<p>まずはおさらいでOctopressでソースコードを表示する方法は以下のとおり。</p>

<h3>1. 指定のディレクトリにファイルを置く</h3>

<p>置き場所は <em>source/downloads/code</em> 。<br/>
例えば、ここに <em>sample/test.rb</em> というファイルを置いておく。</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ mkdir -p source/downloads/code/sample
</span><span class='line'>$ cp test.rb source/downloads/code/sample/</span></code></pre></td></tr></table></div></figure>


<h3>2. include_code でそのファイルを指定する</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>&#x7b;&#x25; include_code sample/test.rb %}</span></code></pre></td></tr></table></div></figure>


<p>これで↓のようにそのコードが表示できる。</p>

<figure class='code'><figcaption><span>test.rb</span><a href='http://www.tokoro.me/downloads/code/sample/test.rb' title='Download code'> download</a></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Float</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">number_decimal_places</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_fraction</span>
</span><span class='line'>    <span class="n">higher</span> <span class="o">=</span> <span class="mi">10</span><span class="o">**</span><span class="nb">self</span><span class="o">.</span><span class="n">number_decimal_places</span>
</span><span class='line'>    <span class="n">lower</span> <span class="o">=</span> <span class="nb">self</span><span class="o">*</span><span class="n">higher</span>
</span><span class='line'>    <span class="n">gcden</span> <span class="o">=</span> <span class="n">greatest_common_divisor</span><span class="p">(</span><span class="n">higher</span><span class="p">,</span> <span class="n">lower</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">lower</span><span class="o">/</span><span class="n">gcden</span><span class="p">)</span><span class="o">.</span><span class="n">round</span><span class="p">,</span> <span class="p">(</span><span class="n">higher</span><span class="o">/</span><span class="n">gcden</span><span class="p">)</span><span class="o">.</span><span class="n">round</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">greatest_common_divisor</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>     <span class="k">while</span> <span class="n">a</span><span class="o">%</span><span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'>       <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">.</span><span class="n">round</span><span class="p">,(</span><span class="n">a</span><span class="o">%</span><span class="n">b</span><span class="p">)</span><span class="o">.</span><span class="n">round</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">b</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コードの全てでなく、指定した箇所だけ表示したい</h2>

<p>それでは、この <em>test.rb</em> の中の <em>to_fraction</em> というコードだけを表示したい場合はどうしたら良いだろう？<br/>
じつは現行のOctopressのデフォルトの状態ではそれができない(<strong>*1</strong>)。</p>

<p>ただ、この機能は <strong>v2.1</strong> では既に実装済みのようで、Octopressを master ではなく <strong>2.1</strong> ブランチから取ってこればこのコードの一部分だけを表示する機能が使えるようになる。</p>

<p>この経緯については、 <a href="https://github.com/imathis/octopress/pull/478">OctopressのPull request</a> に記録がある。</p>

<h3>2.1 ブランチをpullしてOctopressをアップデート</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ git pull octopress 2.1
</span><span class='line'>$ bundle install
</span><span class='line'>$ rake update_source
</span><span class='line'>$ rake update_style</span></code></pre></td></tr></table></div></figure>


<p>以上で取り込み完了です。<br/>
masterでなく <strong>2.1</strong> からpullしていることに注意が必要。</p>

<h3>include_code にstartとendを指定する</h3>

<p>あとは、↓のように <em>include_code</em> で <em>start</em> と <em>end</em> を指定するだけで、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>&#x7b;&#x25; include_code sample/test.rb start:5 end:11 %}</span></code></pre></td></tr></table></div></figure>


<p>コードの一部分だけを表示することが可能になる。</p>

<figure class='code'><figcaption><span>test.rb</span><a href='http://www.tokoro.me/downloads/code/sample/test.rb' title='Download code'> download</a></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">to_fraction</span>
</span><span class='line'>    <span class="n">higher</span> <span class="o">=</span> <span class="mi">10</span><span class="o">**</span><span class="nb">self</span><span class="o">.</span><span class="n">number_decimal_places</span>
</span><span class='line'>    <span class="n">lower</span> <span class="o">=</span> <span class="nb">self</span><span class="o">*</span><span class="n">higher</span>
</span><span class='line'>    <span class="n">gcden</span> <span class="o">=</span> <span class="n">greatest_common_divisor</span><span class="p">(</span><span class="n">higher</span><span class="p">,</span> <span class="n">lower</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">lower</span><span class="o">/</span><span class="n">gcden</span><span class="p">)</span><span class="o">.</span><span class="n">round</span><span class="p">,</span> <span class="p">(</span><span class="n">higher</span><span class="o">/</span><span class="n">gcden</span><span class="p">)</span><span class="o">.</span><span class="n">round</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>*1</strong>: 2012/7/15現在の話。後述のとおり2.1では実装済みなのでじきに普通にできるようになるはず。</p>
<p><a rel="bookmark" href="http://www.tokoro.me/2012/07/15/octopress-part-of-codes/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Macにpandocをインストール中にhs-httpで引っかかったのを解消した手順]]></title>
<link href="http://www.tokoro.me/2012/07/15/install-pandoc/"/>
<updated>2012-07-15T03:13:00+09:00</updated>
<id>http://www.tokoro.me/2012/07/15/install-pandoc</id>

      <content type="html"><![CDATA[<!-- more -->


<h2>hs-httpがインストールできない!</h2>

<p>Macにpandocを入れようと気軽にMacPortsで</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo port install pandoc
</span></code></pre></td></tr></table></div></figure>


<p>したところ <em>hs-http</em> のインストールのところでなにやらエラー&#8230;</p>

<p>試しに <em>hs-http</em> だけインストールしてみたところ、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo port -d install hs-http
</span><span class='line'>  ...
</span><span class='line'>  Configuring HTTP-4000.1.1...
</span><span class='line'>  ghc: could not execute: /usr/bin/gcc-4.2
</span><span class='line'>  Command failed:  <span class="nb">cd</span> <span class="s2">&quot;/opt/local/var/macports/build/_opt_local_var_macports_sources_rsync.macports.org_release_ports_devel_hs-HTTP/hs-http/work/HTTP-4000.1.1&quot;</span> <span class="o">&amp;&amp;</span> runhaskell Setup co
</span><span class='line'>  nfigure --prefix<span class="o">=</span>/opt/local --with-compiler<span class="o">=</span>/opt/local/bin/ghc
</span><span class='line'>  Exit code: 1
</span><span class='line'>  Error: org.macports.configure <span class="k">for </span>port hs-http returned: configure failure: <span class="nb">command </span>execution failed
</span><span class='line'>  DEBUG: Error code: NONE
</span><span class='line'>  DEBUG: Backtrace: configure failure: <span class="nb">command </span>execution failed
</span><span class='line'>      <span class="k">while </span>executing
</span><span class='line'>  <span class="s2">&quot;$procedure $targetname&quot;</span>
</span><span class='line'>  Warning: targets not executed <span class="k">for </span>hs-http: org.macports.activate org.macports.configure org.macports.build org.macports.destroot org.macports.install
</span><span class='line'>  Please see the log file <span class="k">for </span>port hs-http <span class="k">for </span>details:
</span><span class='line'>      /opt/local/var/macports/logs/_opt_local_var_macports_sources_rsync.macports.org_release_ports_devel_hs-HTTP/hs-http/main.log
</span><span class='line'>  To report a bug, follow the instructions in the guide:    http://guide.macports.org/#project.tickets
</span><span class='line'>  Error: Processing of port hs-http failed
</span></code></pre></td></tr></table></div></figure>


<p>と、<em>gcc-4.2</em> が実行できないというエラーが発生している。</p>

<h2>gcc-4.2 を用意する</h2>

<p>それではと gcc-4.2 が入っているか見てみたところ、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ll /usr/bin/gcc*
</span><span class='line'>  lrwxr-xr-x  1 root  wheel  12 12  4  2011 /usr/bin/gcc -&gt; llvm-gcc-4.2
</span></code></pre></td></tr></table></div></figure>


<p>と <em>llvm-gcc-4.2</em> はあるものの <em>gcc-4.2</em> はない模様。<br/>
それでは <em>gcc-4.2</em> を入れましょうと、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo port install gcc42
</span></code></pre></td></tr></table></div></figure>


<p>としてみたものの、Snow Leopard以降にはインストールできないという冷たいお返事。
それならそれで、 <em>gcc-4.2</em> を <em>llvm-gcc-4.2</em> にリンクして使っちゃうことにします。</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo ln -s /usr/bin/llvm-gcc-4.2 /usr/bin/gcc-4.2
</span></code></pre></td></tr></table></div></figure>


<h2>pandocのインストール</h2>

<p>これで晴れて <em>gcc-4.2</em> が存在することになりましたので、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo port -d install hs-http
</span></code></pre></td></tr></table></div></figure>


<p>がばっちり成功しました!
もちろんそもそものpandocも、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo port install pandoc
</span></code></pre></td></tr></table></div></figure>


<p>で普通にインストールできましたとさ。</p>
<p><a rel="bookmark" href="http://www.tokoro.me/2012/07/15/install-pandoc/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
</feed>
