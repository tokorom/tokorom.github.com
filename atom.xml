<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[TOKOROM BLOG]]></title>
  <link href="http://www.tokoro.me/atom.xml" rel="self"/>
  <link href="http://www.tokoro.me/"/>
  <updated>2013-11-05T19:40:06+09:00</updated>
  <id>http://www.tokoro.me/</id>
  <author>
    <name><![CDATA[Yuta ToKoRo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[会社でiOSアプリを扱うときのアカウント管理はこうするべきだった？]]></title>
<link href="http://www.tokoro.me/2013/11/05/ios-dev-accounts/"/>
<updated>2013-11-05T19:21:00+09:00</updated>
<id>http://www.tokoro.me/2013/11/05/ios-dev-accounts</id>

      <content type="html"><![CDATA[<p>私はiOSアプリの開発を3年以上やっていますが、恥ずかしながら会社でこのためのアカウントを管理/運用する方法をきちんと把握できていませんでした。<br/>
というのも個人で開発するぶんにはそんな管理は必要なかったですし、これまで会社でアプリ開発するときも限られた数人だけが担当していたのでアカウントの管理とか必要がなかったのです（というのが言い訳です）。</p>

<p>おそらく、企業でiOSアプリ開発をしている人にとっては普通のことなんでしょうけど、私は今回はじめて知った部分がいくつかあったのでまとめさせていただきます。<br/>
どこかで困っているどなたかに参考になれば良いなというのと、もっとこうしたほうが良いというご意見をいただくのが目的です。</p>

<h2>iOS Dev Center の構成</h2>

<p>まず、iOS Dev Centerで今回説明する部分は以下のような構成になっています。</p>

<p><img class="center" src="http://dl.dropbox.com/u/10351676/images/iOSDevCenterStruct.png"></p>

<p>大きくは、</p>

<ul>
<li>iOS Developer Program</li>
<li>Member Center</li>
<li>iTunes Connect</li>
</ul>


<p>に分かれます。</p>

<h2>メンバーを追加する方法が２つある？？</h2>

<p>今回、私が混乱してしまった部分がここでした。<br/>
iOSアプリ開発/公開のために必要なアカウントは、</p>

<ul>
<li><code>Member Center</code>の<code>People</code></li>
<li><code>iTunes Connect</code>の<code>Manage Users</code></li>
</ul>


<p>の2カ所で管理されています。<br/>
また、この２つのアカウントはそれぞれ別々の用途になります。</p>

<p>個人開発のアカウントや、会社の代表アカウントを使う際には１つのアカウントでこの２つの役割を同時に担ってくれるため、この２つが違うということを気にしなくても良かったのです。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/11/05/ios-dev-accounts/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Objective-Cでカリー化とか部分適用してみる]]></title>
<link href="http://www.tokoro.me/2013/11/04/objective-c-haskell/"/>
<updated>2013-11-04T16:09:00+09:00</updated>
<id>http://www.tokoro.me/2013/11/04/objective-c-haskell</id>

      <content type="html"><![CDATA[<h2>導入</h2>

<p><a href="https://info.cookpad.com/">会社</a>でHaskell勉強会に参加して、カリー化とか部分適用のパートの輪読当番になったのだが、正直、輪読時点でもそれがなんなのかよくわかっていませんでした。
しかし、勉強会で参加者のみなさまに教えてもらった結果、カリー化とかがやっと理解できました！</p>

<p>ということで嬉しくなって先日寝るときに布団の中で「Objective-Cでもできるかなー」と脳内コーディングしてみた結果を実装してみました。</p>

<p>もう他の人がやってるかもとか、こんなん実装しても実際のところ使わないよねとか、そんなことはまったく気にせずです。</p>

<p>実際やってみたソースコードは <a href="https://github.com/tokorom/ObjcHaskell">こちら</a> に置いてあります。</p>

<h2>ひとまずのゴール</h2>

<p>カリー化して部分適用ができる状態までということで、Haskellの<code>map</code>が実現できるところまでを目標にしました。</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>map (+3) [1, 2, 3]</span></code></pre></td></tr></table></div></figure>


<p>これです。<br/>
Objective-Cでは当然、空白区切りで引数を渡していくような構文はないわけなので、関数ポインタ的なやつを使って、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>map (+3) ([1, 2, 3])</span></code></pre></td></tr></table></div></figure>


<p>みたいな形で<code>()</code>で区切り、関数の実行結果として取得した関数ポインタ（実際に関数が返すのはBlock）を使って次の引数を渡す（要するにカリー化）することでこれを実現することにしました。</p>

<p>しかし、Objective-Cには演算子を()で囲ってセクション化するとかないし、リストのリテラルも違うので、やるとしたらこうなります。</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>map (OP('+') (@3)) (@[@1, @2, @3])</span></code></pre></td></tr></table></div></figure>


<p>セクションに関しては、演算子を関数化するマクロを作り、その関数に引数を１つ部分適用するイメージとします。</p>

<p>ということで、Objective-Cで上の<code>map</code>が実現できたらはじめのゴールとしては十分かなと思いました。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/11/04/objective-c-haskell/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[iOS 7はもっさりか？比較検証してみた]]></title>
<link href="http://www.tokoro.me/2013/09/23/ios7-design/"/>
<updated>2013-09-23T17:45:00+09:00</updated>
<id>http://www.tokoro.me/2013/09/23/ios7-design</id>

      <content type="html"><![CDATA[<p><strong>今回の記事はUIデザイナの Morino氏 からの寄稿です。</strong></p>

<p>iOS 7が正式リリースされました。既にアップデートを行って実際に試されている方も多いと思いますが、今回はUIに大幅な変更が加えられたために、まだ操作に戸惑いのある方もいるのではないでしょうか。</p>

<p>特にiOS 7にしてから重く感じる、もっさりしているという意見もけっこう多いようです。iOS 7をしばらくいじってからiOS 6の端末を触ると、たしかにiOS 6の方がきびきび動いているように感じます。
今回は半透明やぼかし、視差効果などの画像エフェクトをふんだんに使用しているために画像処理の負荷が高いことも確かでしょう。しかし、全てが端末の性能のせいというわけでもないことを、今回はご紹介したいと思います。</p>

<p>頻繁に操作を行う以下の4つのシーンについて、ちょっとした比較検証を行いました。</p>

<ul>
<li>ロック解除してから、ホーム画面のアイコンが全て出現するまでの時間</li>
<li>アプリアイコンをタップしてから開くまでの時間</li>
<li>フォルダをタップしてから開くまでの時間</li>
<li>ホームボタンをダブルクリックしてから、マルチタスク画面を開くまでの時間</li>
</ul>


<p>iOS 6とiOS 7それぞれの検証結果は、以下の通りです。</p>

<p>※iOSシミュレータで検証を行ったため、実機とは多少違いがある点はご容赦ください。また、時間の長さも30fpsの動画で1フレームずつ進めながら自分でカウントした数値です。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/09/23/ios7-design/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[iOSのライブラリだってTravis CIとかCoverallsとか使うべき]]></title>
<link href="http://www.tokoro.me/2013/07/09/objc-travis-coveralls/"/>
<updated>2013-07-09T07:00:00+09:00</updated>
<id>http://www.tokoro.me/2013/07/09/objc-travis-coveralls</id>

      <content type="html"><![CDATA[<p><img class="center" src="http://dl.dropbox.com/u/10351676/images/ci_coverage_badges.png"></p>

<p>今日はGithubに公開したiOS用のライブラリを <strong>Travis CI</strong> と <strong>Coveralls</strong> に対応した手順を紹介したいと思います。</p>

<p>なお、実際にこれらを適用して運用しているリポジトリのサンプルは、</p>

<p><a href="https://github.com/tokorom/BlockInjection">https://github.com/tokorom/BlockInjection</a></p>

<p>になります。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/07/09/objc-travis-coveralls/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[【アプリ開発のお手本に】iOS 7の設計においてアップルが大切にした4つのポイント]]></title>
<link href="http://www.tokoro.me/2013/06/17/ios7-ui-design/"/>
<updated>2013-06-17T13:29:00+09:00</updated>
<id>http://www.tokoro.me/2013/06/17/ios7-ui-design</id>

      <content type="html"><![CDATA[<h2>今回の記事はUIデザイナの <a href="https://twitter.com/limonomori">Morino氏</a> からの寄稿です</h2>

<p><a href="http://www.tokoro.me/2013/06/13/ios7-video/">前回</a> はiOS 7紹介ビデオの中のジョナサン・アイブ氏のパートをご紹介しました。</p>

<p>今回は、その中でも特に重要と感じたいくつかのフレーズをピックアップして深堀りしてみたいと思います。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/06/17/ios7-ui-design/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Objective-Cのコードを削れるだけ削る7のTips]]></title>
<link href="http://www.tokoro.me/2013/06/15/objc-reduce/"/>
<updated>2013-06-15T16:04:00+09:00</updated>
<id>http://www.tokoro.me/2013/06/15/objc-reduce</id>

      <content type="html"><![CDATA[<p>既存記事のまとめのため新しい要素があるわけではないのですが、Appleから発表されたXcode 5が正式にリリースされる前の復習ということで。</p>

<h2>Tipsを適用する前のコード</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - Private Category</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Sample</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSNumber</span><span class="o">*</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSNumber</span><span class="o">*</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSNumber</span><span class="o">*</span> <span class="n">f</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSArray</span><span class="o">*</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSDictionary</span><span class="o">*</span> <span class="n">dictionary</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">)</span> <span class="n">Sample</span><span class="o">*</span> <span class="n">child</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">)</span> <span class="n">UIColor</span><span class="o">*</span> <span class="n">color</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">assign</span><span class="p">)</span> <span class="n">NSUInteger</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">assign</span><span class="p">)</span> <span class="n">CGRect</span> <span class="n">rect</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">privateMethod1</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">privateMethod2</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">privateMethod3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Main Implementation</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Sample</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i_</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">c</span> <span class="o">=</span> <span class="n">c_</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">f</span> <span class="o">=</span> <span class="n">f_</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">array</span> <span class="o">=</span> <span class="n">array_</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="n">dictionary_</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">child</span> <span class="o">=</span> <span class="n">child_</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">color</span> <span class="o">=</span> <span class="n">color_</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">index</span> <span class="o">=</span> <span class="n">index_</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">rect_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">privateMethod1</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">privateMethod2</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">privateMethod3</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">privateMethod2</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithChar:</span><span class="sc">&#39;a&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="mf">3.14f</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">privateMethod3</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;1&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">dictionary</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span><span class="s">@&quot;val1&quot;</span><span class="p">,</span> <span class="s">@&quot;key1&quot;</span><span class="p">,</span> <span class="s">@&quot;val2&quot;</span><span class="p">,</span> <span class="s">@&quot;key2&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">child</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Sample</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">rect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを以下の7のTipsで削れるだけ削っていきます。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/06/15/objc-reduce/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[iOS 7 Video の内容の書き起こしと日本語訳（寄稿:UIデザイナMorino氏)]]></title>
<link href="http://www.tokoro.me/2013/06/13/ios7-video/"/>
<updated>2013-06-13T01:49:00+09:00</updated>
<id>http://www.tokoro.me/2013/06/13/ios7-video</id>

      <content type="html"><![CDATA[<h2>今回の記事はUIデザイナの <a href="https://twitter.com/limonomori">Morino@WWDC2013参加中</a> に寄稿いただきました！</h2>

<p>Appleの公式サイトに <strong>iOS 7</strong> を紹介するビデオが公開されましたね。<br/>
<a href="http://www.apple.com/ios/ios7/">http://www.apple.com/ios/ios7/</a></p>

<p>特に前半の4分間でジョナサン・アイブ氏により語られているiOS 7の説明部分に、今回の大きなデザイン変更の様々な要点が含まれており、これからのアプリ設計のあるべき方向性が示唆されています。<br/>
これらをよく理解しておくことが非常に重要だと感じていますので、自分自身の復習のためとみなさんへの展開の意味で、書き起こし＆和訳を行いました。</p>

<p>デザイナのみならずアプリ開発者の皆様にも有用かと思いますので、ぜひご参照ください。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/06/13/ios7-video/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Xcode 5: TDD/CIまわりに強力なアップデート(Appleがサイトで公開している範囲内で)]]></title>
<link href="http://www.tokoro.me/2013/06/12/xcode5-preview/"/>
<updated>2013-06-12T01:09:00+09:00</updated>
<id>http://www.tokoro.me/2013/06/12/xcode5-preview</id>

      <content type="html"><![CDATA[<p><a href="https://twitter.com/tokorom">tokorom@WWDC2013参加中</a>です。<br/>
WWDC2013で膨大なアップデートを学習中でしゃべりたいことが盛りだくさんなんですが、NDAのため我慢の日々。</p>

<p>で、キーノートの範囲の話は既に各所で情報が出ているわけですが、キーノートに出ていない項でも、Appleが非ログインで参照できるサイトで既に公表しているものがいくつかありました。</p>

<p>概要レベルでありますが、なかでも <strong>TDD</strong> とか <strong>CI</strong> まわりでiOSアプリ開発者にとって嬉しい情報がありましたので報告させていただきます。<br/>
あくまでもAppleのサイトで公表されている範囲内のことしか書けませんのであしからず。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/06/12/xcode5-preview/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[UIAlertViewよりもおとなしいメッセージダイアログを利用する]]></title>
<link href="http://www.tokoro.me/2013/05/27/ssgentlealertview/"/>
<updated>2013-05-27T23:30:00+09:00</updated>
<id>http://www.tokoro.me/2013/05/27/ssgentlealertview</id>

      <content type="html"><![CDATA[<h2>UIAlertViewは警告目的のダイアログ</h2>

<p>そもそもUIAlertViewはエンドユーザになんらかの警告をするときに利用するもので、iOSヒューマンインターフェースガイドラインにも、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>一般にアラートは、次のような場合には不要です。
</span><span class='line'>* なんらかの情報、特にアプリケーションの標準機能に関する情報を目に付かせるためだけの場合。
</span><span class='line'>  代わりに、アプリケーションのスタイルに調和し、目を引く情報表示の方法を設計すべきです。</span></code></pre></td></tr></table></div></figure>


<p>と記載されています。</p>

<p>その一方で、UIAlertViewは簡単に利用でき、なんらかの情報を表示するのにどうしても使いたくなってしまいます。<br/>
それならばUIAlertViewの外観を変えて使えば、というのも考えられますが、ところがどっこいUIAlertViewはAppearanceの変更を一切サポートしていません。</p>

<p>警告目的のアラートダイアログの外観がアプリによって変更されると、エンドユーザからすればそれがなんらかの警告であると認知しづらくなってしまうからだと思われます（アラートダイアログについては全アプリで共通であるべきという思想）。</p>

<h2>警告目的ではない普通のメッセージダイアログ</h2>

<p>それでは、警告目的でない汎用的に使える普通のメッセージダイアログがあったほうが良いねという話になり、作ってみました。</p>

<p><a href="https://github.com/tokorom/SSGentleAlertView">https://github.com/tokorom/SSGentleAlertView</a></p>

<p>このSSGentleAlertViewは、</p>

<ul>
<li>UIAlertViewと同じコードで利用できる</li>
<li>UIAlertViewとは違い、外観を変更できる</li>
<li>デフォルトではUIAlertViewよりもおとなしめなダイアログ表示になる</li>
</ul>


<p>という３点に留意して作っています。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/05/27/ssgentlealertview/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[UIKitで使われている画像パーツをまとめて取得する]]></title>
<link href="http://www.tokoro.me/2013/05/23/uikit-images/"/>
<updated>2013-05-23T10:11:00+09:00</updated>
<id>http://www.tokoro.me/2013/05/23/uikit-images</id>

      <content type="html"><![CDATA[<h2>UIKitで使われている画像はどこにある？</h2>

<p>例えば、UIAlertViewのアラートの画像ってどういう構成になってる？とかUISegmentedControlのAppearance変えたいんだけど当てはめる画像はどう作る？などというときにUIKitが標準で使っている画像パーツを参照できると便利です。</p>

<p>プログラマというか特にはデザイナさんにとって有用だと思います。</p>

<p>その画像パーツですが、Xcode（iOSシミュレータ）の中に入っているのでそこから抜くのが手っ取り早いです。<br/>
具体的には（これはiOS6.1の場合）、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.1.sdk/System/Library/Frameworks/UIKit.framework/Shared@2x.artwork
</span></code></pre></td></tr></table></div></figure>


<p>が画像パーツを含むファイルになります。</p>

<p>他にも、同じディレクトリに</p>

<ul>
<li>Shared.artwork</li>
<li>Shared@2x~ipad.artwork</li>
<li>Shared@2x~iphone.artwork</li>
<li>Shared~ipad.artwork</li>
<li>Shared~iphone.artwork</li>
</ul>


<p>がありますので取りたいものに応じてお好みで。</p>

<p>ひとまず、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cp /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.1.sdk/System/Library/Frameworks/UIKit.framework/Shared@2x.artwork ~/Desktop/
</span></code></pre></td></tr></table></div></figure>


<p>などでこのファイルをデスクトップにでもコピーしておきましょう。</p>

<h2>artworkから画像ファイルを抽出</h2>

<p>で、artworkから肝心の画像ファイルを抽出するのに、 <a href="git://github.com/davepeck/iOS-artwork.git">iOS-artwork</a> というやつを使わせてもらいます。</p>

<p>まずは、これを</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/05/23/uikit-images/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[BlockInjectionをバージョンアップしました]]></title>
<link href="http://www.tokoro.me/2013/04/01/blockinjection2/"/>
<updated>2013-04-01T23:12:00+09:00</updated>
<id>http://www.tokoro.me/2013/04/01/blockinjection2</id>

      <content type="html"><![CDATA[<h2>BlockInjectionとはなんぞや</h2>

<p>Objective-Cの特定のメソッドの前後に処理を追加できるライブラリです。<br/>
クラスの外側からアスペクト指向的に振る舞いを追加できるのが特徴です。</p>

<p><a href="https://github.com/tokorom/BlockInjection">https://github.com/tokorom/BlockInjection</a> で公開しています。</p>

<h2>バージョンアップ内容</h2>

<p><a href="http://www.tokoro.me/2013/03/07/block-injection/">前記事</a> からのバージョンアップ内容は以下です。</p>

<ul>
<li>リファクタリングしてメソッド名が一式変更になりました（これまでのものはDeprecatedですがまだ使えます）</li>
<li>クラスメソッドにも対応しました</li>
<li>複数のクラスやメソッドを一度に追加できるようになりました</li>
<li>正規表現で指定できるようになりました(※1)</li>
<li>注入したBlockの中で注入先のメソッド名を取得できるようになりました(※2)</li>
<li>オマケで単純なメソッド実装置き換え機能も追加しました</li>
</ul>


<h2>UIViewの勝手に呼ばれているsetterでまとめて全てログ出力させる</h2>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/04/01/blockinjection2/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[BlockInjectionで元のソースコードを汚さないで振る舞い追加]]></title>
<link href="http://www.tokoro.me/2013/03/07/block-injection/"/>
<updated>2013-03-07T12:05:00+09:00</updated>
<id>http://www.tokoro.me/2013/03/07/block-injection</id>

      <content type="html"><![CDATA[<h2>例えばこんなコードに違和感はありませんか？</h2>

<p>自分の場合よくあることなのですが、例えばiOSアプリを開発していて、Google Analytics のトラッキングのためのコードを加えるとき、</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">sendButtonDidPush:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// トラッキングのためのコード</span>
</span><span class='line'>  <span class="p">[</span><span class="n">tracker</span> <span class="nl">sendEventWithCategory:</span><span class="s">@&quot;uiAction&quot;</span>
</span><span class='line'>                      <span class="nl">withAction:</span><span class="s">@&quot;sendButtonDidPush&quot;</span>
</span><span class='line'>                       <span class="nl">withLabel:</span><span class="nb">nil</span>
</span><span class='line'>                       <span class="nl">withValue:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="c1">// 以降、送信ボタンを押したときの処理</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんなかんじにボタンが押されたときの処理のところにトラッキングのためのコードを埋め込んだりすると思います。</p>

<p>これはこれで問題はないのですが、プログラムのあちらこちらにトラッキングのためのコードを埋め込んで、本来の処理のコードを汚してしまっているのに違和感がありました。</p>

<p>どうにかしてトラッキングのためのコードを外出しに（また、理想的にはどこかにひとまとめに）できないものでしょうか？<br/>
いわゆるアスペクト指向的なかんじで。</p>

<h2>そんなときに BlockInjection</h2>

<p>ということで本題に入りますが、それを解決するために <a href="https://github.com/tokorom/BlockInjection">BlockInjection</a> というライブラリを作りました。<br/>
古くは AspectCocoa だったりいくつかそれっぽいのはあったのですが、いずれも古い、大きすぎるなどの理由で適切なものが見つからなかったため、この目的に特化したライトなやつとして作っています。</p>

<p>例えば、上記のコードの場合、こんなかんじで外側から処理を埋め込めます。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/03/07/block-injection/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[tmuxでC-t C-tでのサイクルをより便利にする : 同じキーでpaneでもwindowでも行き来できるようにしてみた]]></title>
<link href="http://www.tokoro.me/2013/01/17/tmux-toggle/"/>
<updated>2013-01-17T01:55:00+09:00</updated>
<id>http://www.tokoro.me/2013/01/17/tmux-toggle</id>

      <content type="html"><![CDATA[<p><strong> ※tmuxのprefixキーが C-t 以外のかたはそのキーに読み替えをお願いします </strong></p>

<h2>導入</h2>

<p><a href="http://d.hatena.ne.jp/naoya/20130108/1357630895">近頃の開発環境 : Mosh、z、tmux、Emacs、Perl について</a> を読んで自分もC-t C-tでtmuxのペイン（pane）を行ったり来たりというのを真似してみた。</p>

<p>設定は以下のとおり。</p>

<ul>
<li>.tmux.conf</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">bind </span>C-t last-pane
</span></code></pre></td></tr></table></div></figure>


<p>これでpaneが複数ある場合には C-t を連打するだけで２つのpaneを行ったり来たりでき確かに便利。</p>

<p>ただ、じつはこの真似をする前には C-t C-t には <code>last-window</code> を割り当てており、paneを使っていないケースではそれはそれで便利だった。</p>

<p>例えば、設定を変えたことによって、paneなしで２つのwindowで作業しているときに C-t C-t で２つのwindow行き来しようと思ったらエラーとなりけっこうストレスがあったりした（慣れれば大丈夫なんでしょうけど）。</p>

<h2>改善</h2>

<p>ということで、</p>

<ul>
<li>paneがあれば <code>last-pane</code></li>
<li>paneがなければ <code>last-window</code></li>
<li>ついでにwindowさえもなければ新しいwindowを作って移動</li>
</ul>


<p><a rel="bookmark" href="http://www.tokoro.me/2013/01/17/tmux-toggle/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[VimでiOSのリファレンスを直接参照したい → CtrlPの拡張でできるようになりました]]></title>
<link href="http://www.tokoro.me/2013/01/15/ctrlp-docset/"/>
<updated>2013-01-15T00:40:00+09:00</updated>
<id>http://www.tokoro.me/2013/01/15/ctrlp-docset</id>

      <content type="html"><![CDATA[<h2>Vimでリファレンス読む必要ありますか？</h2>

<p>正直微妙なところでしょうか。<br/>
自分の場合、 <strong>Dash</strong> があればVimで直接にリファレンスAPIドキュメントとか)を見れなくてもそんなには困ってないです。</p>

<p>ただ、せっかく<a href="http://www.tokoro.me/2013/01/15/ctrlp-docset/">前の記事</a>でVimでObjective-Cのコード補完をできるようにしたので、リファレンスもVimで参照できるようにしてみたいと思います。</p>

<ul>
<li>Vimでさらっと検索してリファレンスから関数をコピー</li>
<li>そのままプログラミングにペースト</li>
</ul>


<p>というのをキーボードから手を離さずに手早くできるというメリットはありそうです。</p>

<p>※ ただ、がっつりドキュメント読むときはやはりDashとか使ったほうが良いと思います</p>

<h2>Docsetを検索するCtrlPのエクステンションを作りました</h2>

<p><a href="https://github.com/tokorom/ctrlp-docset">ctrlp-docset</a> というpluginを作りました。<br/>
オフィシャルのiOSのドキュメント(iOS 6.0 Library)は <strong>Docset</strong> 形式になっているので、そのDocsetをVimから参照するイメージです。<br/>
なのでiOS専用というわけではなく、Docsetならなんでも参照可能です。</p>

<p>vim-refと迷いましたが、<a href="https://github.com/kien/ctrlp.vim">CtrlP</a> を使ってみたかったのでCtrlPのエクステンションとして作成しました。</p>

<p>CtrlPについては、</p>

<ul>
<li><a href="http://mattn.kaoriya.net/software/vim/20111228013428.htm">意外と知られていない便利なvimプラグイン「ctrlp.vim」</a></li>
<li><a href="http://kaneshin.hateblo.jp/entry/vim-advent-calendar-2012">Vimプラグインの拡張機能プラグインを作ってVimをさらに使いやすくしよう</a></li>
</ul>


<p>あたりがわかりやすかったです。</p>

<p>インストールして動かすと、</p>

<p><img src="http://dl.dropbox.com/u/10351676/images/ctrlp_docset.jpg" alt="ctrlp_docset.jpg" /></p>

<p>といったかんじで、クラスやメソッドをインクリメンタル検索できるようになります。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/01/15/ctrlp-docset/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[もっと簡単にVimでObjective-Cのコード補完を実行する]]></title>
<link href="http://www.tokoro.me/2013/01/14/easy-objc-complement/"/>
<updated>2013-01-14T05:23:00+09:00</updated>
<id>http://www.tokoro.me/2013/01/14/easy-objc-complement</id>

      <content type="html"><![CDATA[<h2>概要</h2>

<p>先日、 <a href="http://www.tokoro.me/2013/01/02/clang-complete-for-vim/">VimでObjective-Cのコード補完を実行する With Clang</a> でVimでclangを使ったコード補完をする方法について紹介させていただきましたが、今回はそのUpdate版になります。</p>

<p>というのも、<code>clang_complete</code>には<code>g:clang_auto_user_options</code>という素晴らしいオプションがあり、これにより<code>clang_complete</code>本体をいじらなくてもiOS用の設定を簡単に拡張できることが分かったためです。<br/>
具体的には、<code>clang_complete</code>ともう１つ、後述の拙作の <a href="https://github.com/tokorom/clang_complete-getopts-ios">plugin</a> を１つインストールいただき、</p>

<ul>
<li>after/ftplugin/objc.vim</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">let </span>g:clang_auto_user_options <span class="o">=</span> <span class="s1">&#39;path, .clang_complete, ios&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>という設定をするだけで多くのプロジェクトが <code>.clang_complete</code> ファイルなしでコード補完できるようになる見込みです（手元のプロジェクトは全て追加設定いらずでした）。
このオプションの中の、</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/01/14/easy-objc-complement/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Objective-Cで最近お気に入りのマクロ４つ]]></title>
<link href="http://www.tokoro.me/2013/01/09/objc-macro/"/>
<updated>2013-01-09T00:17:00+09:00</updated>
<id>http://www.tokoro.me/2013/01/09/objc-macro</id>

      <content type="html"><![CDATA[<h2>マクロ</h2>

<p>マクロの利用については賛否両論がありますが、ぼくはわりかし使います。</p>

<p><strong> ※2013/1/9 追記 </strong></p>

<p>上記のとおり独自のマクロを使うこと自体に賛否両論あります。<br/>
例えば独自のマクロを定義して利用することで、</p>

<ul>
<li>他の人がコードを見たときに分かりづらくなる</li>
<li>思わぬ不具合が出るケースがある</li>
<li>名前の衝突リスクがある（マクロは名前空間が使えない）</li>
</ul>


<p>などのデメリットがあります。
特にチームや会社でのご利用の際にはよくよくご留意をお願いします。</p>

<h2>1. [NSString stringWithFormat:] を簡単に</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span><span class="o">*</span> <span class="n">message</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;HELLO %3.1d&quot;</span><span class="p">,</span> <span class="mf">333.333</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>[NSString stringWithFormat:]</code>はよく使うのだが長くて面倒&#8230;とよく思ってしまう。<br/>
ということで、</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/01/09/objc-macro/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Objective-Cで"@dynamic"の使いどころを考える]]></title>
<link href="http://www.tokoro.me/2013/01/05/objc-dynamic/"/>
<updated>2013-01-05T15:07:00+09:00</updated>
<id>http://www.tokoro.me/2013/01/05/objc-dynamic</id>

      <content type="html"><![CDATA[<h2>Objective-Cの @dynamic はお好きですか？</h2>

<p>ぼくはけっこう好きです。</p>

<p><code>@synthesize</code>のほうは昔はほぼ必須で書かないといけなかったり <a href="http://www.tokoro.me/2012/08/12/objc-new-statements/">Xcode4.4で省略できるようになった</a> ことで有名ですが、いっぽうで<code>@dynamic</code>のほうはあまり日の目を浴びていない気がします。</p>

<p>そこで、今日は<code>@dynamic</code>について再考してみることにしました。<br/>
以下、ぼくが思い返してみて<code>@dynamic</code>がこんなときに便利だったと感じたところを２点挙げさせていただきます。<br/>
みなさまのほうでも「こんなとき便利だよ」というのがありましたら是非ご教示ください。</p>

<h2>クラスの内部実装が適当なのを隠すときに</h2>

<p>そもそもこの実装自体がどうかという話もあるのですが、リファクタリング前にひとまず雑な実装をしてしまうことはままあります。<br/>
例えば、ゲームスコアを管理する<code>GameScore</code>クラスを作ったとして、その中で <strong>ハイスコア</strong> とかいくつかのスコアを管理する際、<code>scores</code>というNSDictionaryインスタンスにささっと入れていたとします（ほんとは普通にプロパティにしたほうが良いですが例として）。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/01/05/objc-dynamic/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[VimでObjective-Cのコード補完を実行する with clang]]></title>
<link href="http://www.tokoro.me/2013/01/02/clang-complete-for-vim/"/>
<updated>2013-01-02T02:09:00+09:00</updated>
<id>http://www.tokoro.me/2013/01/02/clang-complete-for-vim</id>

      <content type="html"><![CDATA[<h2>概要</h2>

<p>VimやEmacsでiOSアプリ開発をするときに「Snippetとかちゃんと設定してればXcodeほどのコード補完は必要ない」と強がりを言ってはみるものの「本当はちょっとコード補完使いたいときあるんだよね」と思ってました。</p>

<p>そこで、重い腰をあげてVimでもObjective-Cのコード補完ができるよう設定してみました。</p>

<p>具体的には、</p>

<ol>
<li><strong>clangコマンドでのコード補完を試してみる</strong></li>
<li><strong>その結果をもってVimの <code>clang_complete</code> プラグインを導入する</strong></li>
</ol>


<p>という手順で実施しました。</p>

<p>結果として満足いく補完環境が整いましたので紹介させていただきます。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2013/01/02/clang-complete-for-vim/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Mac + Terminal + tmux + vim でクリップボードを快適に使う]]></title>
<link href="http://www.tokoro.me/2012/12/31/mac-terminal-japanese/"/>
<updated>2012-12-31T04:47:00+09:00</updated>
<id>http://www.tokoro.me/2012/12/31/mac-terminal-japanese</id>

      <content type="html"><![CDATA[<p>Macの初期設定のたびに混乱してるので再整理しておきます。</p>

<ul>
<li>Mac</li>
<li>Terminal</li>
<li>tmux</li>
<li>vim</li>
</ul>


<p>で開発をする人向けです。</p>

<h2>まずはMacVim KaoriYa</h2>

<p>MacでVimを使うならひとまず <a href="http://code.google.com/p/macvim-kaoriya/">MacVim KaoriYa</a> は外せません。<br/>
日本語を扱う上で便利な設定がデフォルトで入ってます。</p>

<p>当然、Terminalでも <strong>Macvim KaoriYa</strong> を使いたいので、 <strong>.zshenv</strong> などに以下のaliasを設定してCUIで <strong>vi</strong> や <strong>vim</strong> を叩いたときにも <strong>MacVim KaoriYa</strong> が使われるようにします。</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[</span> -f /Applications/MacVim.app/Contents/MacOS/Vim <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">alias </span><span class="nv">vi</span><span class="o">=</span><span class="s1">&#39;env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim &quot;$@&quot;&#39;</span>
</span><span class='line'>  <span class="nb">alias </span><span class="nv">vim</span><span class="o">=</span><span class="s1">&#39;env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim &quot;$@&quot;&#39;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>tmux でも pbcopy/pbpaste が使えるようにする</h2>

<p><a rel="bookmark" href="http://www.tokoro.me/2012/12/31/mac-terminal-japanese/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Objective-Cのテストクラスからプライベートメソッド/プロパティを参照したい]]></title>
<link href="http://www.tokoro.me/2012/09/12/objc-private-test/"/>
<updated>2012-09-12T14:10:00+09:00</updated>
<id>http://www.tokoro.me/2012/09/12/objc-private-test</id>

      <content type="html"><![CDATA[<p>dkfjさんが <a href="http://d.hatena.ne.jp/dkfj/20120909/1347176787">Objective-Cで、プライベートメソッド・プロパティにアクセスし、ユニットテストを実行する方法</a> という記事を書かれていました。</p>

<p>せっかくなので私がやっている方法も書かせていただきます。</p>

<h2>テスト対象のクラス</h2>

<p>以下のようにプライベートメソッドとプロパティを持ったExampleClassをテストするとします。</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;ExampleClass.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ExampleClass</span><span class="p">()</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">privateMethod</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">assign</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">flag</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ExampleClass</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">privateMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">flag</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>テストクラス</h2>

<p>自分の場合は、こんなかんじでテストクラスでテスト対象のプライベートメソッドやプロパティを宣言し直して使ってます。</p>

<p><a rel="bookmark" href="http://www.tokoro.me/2012/09/12/objc-private-test/">続きを読む &rarr;</a></p>]]></content>
    </entry>
  
</feed>
