<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TOKOROM BLOG</title>
    <link>http://www.tokoro.me/</link>
    <description>Recent content on TOKOROM BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>tokorom</copyright>
    <lastBuildDate>Thu, 11 Jun 2020 14:57:28 +0900</lastBuildDate>
    <image>
      <url>http://www.tokoro.me/img/hugo.png</url>
      <title>GoHugo.io</title>
      <link>http://www.tokoro.me/</link>
    </image>
    
	<atom:link href="http://www.tokoro.me/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JenkinsにBitbucketからビルド命令を出す際にIDとPasswordを埋め込まないようにする</title>
      <link>http://www.tokoro.me/posts/security-for-jenkins/</link>
      <pubDate>Sun, 29 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.tokoro.me/posts/security-for-jenkins/</guid>
      <description>
        前の記事でBitbucketにpushしたのをトリガーにJenkinsでOctopressをデプロイするというのをやったのだが、このときは認証なしでJobの実行できるようになってしまっていた。
つまりこのままだと自分のJenkinsは認証なしで全てのJobが実行できてしまうという状態でよろしくない。
ひとつの解決索としてビルド命令用のユーザを作り、そのIDとPasswordをURLに直接埋め込んでしまうという方法も考えられるが、今回はそれを極力しない方向でがんばりたいと思う。
JenkinsにBitbucketからアクセスするためのユーザを追加 まずはBitbucketからJenkinsにアクセスする専用のユーザを作る。
※ ユーザの追加方法については このあたり を参照
今回は、bitbucket というユーザを追加した。
また、 Manage Jenkins -&amp;gt; Configure System で、
 Access Control  Authorization  Matrix-based security  bitbucketユーザに Job の Read だけチェック        としておいて、bitbucketユーザが最低限のことのみ可能なように設定しておく。
このとき、Anonymousユーザの Job の Read にチェックがついていれば外しておく。
Jenkinsへのビルド命令専用のドメインを追加 これまでは jenkins.yourdomain というドメインでJenkinsにアクセスさせていたとして、ビルド命令専用の push-to-jenkins.yourdomain を追加した。
これはnginxが外部からのビルド命令だと分かるようにするための目印としての意味合いなので、ドメインを追加する以外の方法でも良い。
nginxに設定追加 nginxのconfに、以下のようにpush-to-jenkins.yourdomainへのアクセスをBasic認証つきでローカルのJenkinsのURLに委譲するよう設定を追加する。
server { listen 80; server_name push-to-jenkins.yourdomain; location / { proxy_pass http://localhost:8080; proxy_set_header Authorization &amp;quot;Basic XXXXXX&amp;quot;; } } XXXXXX の部分には実際には bitbucket:yourpassword というBasic認証のIDとPasswordの文字列をBase64エンコードした文字列を入れる必要がある。
      </description>
      
    </item>
    
    <item>
      <title>さくらVPSにJenkinsさんをインストールする</title>
      <link>http://www.tokoro.me/posts/install-jenkins-to-sakura/</link>
      <pubDate>Tue, 24 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.tokoro.me/posts/install-jenkins-to-sakura/</guid>
      <description>
        JDKのインストール Javaが未インストールならこちらから。
$ sudo yum install java-1.6.0-openjdk java-1.6.0-openjdk-devel Jenkinsのインストール 基本的に 公式ページ に書いてあるとおりにするだけ。
$ sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo $ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key $ sudo yum install jenkins Jenkinsの起動 $ sudo service jenkins start これでインストールと起動が完了。簡単すぎる！
試しに
$ curl http://localhost:8080/ とすると、
&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Dashboard [Jenkins]&amp;lt;/title&amp;gt;... みたいなHTMLが出力されてJenkinsさんが動いているのを確認できるはず。
ついでにサーバ再起動時にJenkinsさんが自動で起動するようにしておく。
$ sudo chkconfig jenkins on nginxの設定 まず、nginxが未インストールなら
$ sudo yum install nginx でインストールしておく。
Jenkinsにnginx経由でアクセスするために、自分の場合は /etc/nginx/conf.d/virtual.conf に以下リバースプロキシの設定を加えた。
server { listen 80; server_name jenkins.自分の.ドメイン location / { proxy_pass http://localhost:8080; } } ここでは、 http://jenkins.
      </description>
      
    </item>
    
    <item>
      <title>Macにpandocをインストール中にhs-httpで引っかかったのを解消した手順</title>
      <link>http://www.tokoro.me/posts/install-pandoc/</link>
      <pubDate>Sun, 15 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.tokoro.me/posts/install-pandoc/</guid>
      <description>
        hs-httpがインストールできない! Macにpandocを入れようと気軽にMacPortsで
$ sudo port install pandoc したところ hs-http のインストールのところでなにやらエラー&amp;hellip;
試しに hs-http だけインストールしてみたところ、
$ sudo port -d install hs-http ... Configuring HTTP-4000.1.1... ghc: could not execute: /usr/bin/gcc-4.2 Command failed: cd &amp;#34;/opt/local/var/macports/build/_opt_local_var_macports_sources_rsync.macports.org_release_ports_devel_hs-HTTP/hs-http/work/HTTP-4000.1.1&amp;#34; &amp;amp;&amp;amp; runhaskell Setup co nfigure --prefix=/opt/local --with-compiler=/opt/local/bin/ghc Exit code: 1 Error: org.macports.configure for port hs-http returned: configure failure: command execution failed DEBUG: Error code: NONE DEBUG: Backtrace: configure failure: command execution failed while executing &amp;#34;$procedure$targetname&amp;#34; Warning: targets not executed for hs-http: org.
      </description>
      
    </item>
    
    <item>
      <title>Octopressでソースコードの一部分だけを参照する</title>
      <link>http://www.tokoro.me/posts/octopress-part-of-codes/</link>
      <pubDate>Sun, 15 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.tokoro.me/posts/octopress-part-of-codes/</guid>
      <description>
        おさらい：Octopressでソースコードを表示する まずはおさらいでOctopressでソースコードを表示する方法は以下のとおり。
1. 指定のディレクトリにファイルを置く 置き場所は source/downloads/code 。
例えば、ここに sample/test.rb というファイルを置いておく。
$ mkdir -p source/downloads/code/sample $ cp test.rb source/downloads/code/sample/ 2. include_code でそのファイルを指定する {% include_code sample/test.rb %} これで↓のようにそのコードが表示できる。 {% include_code sample/test.rb %}
コードの全てでなく、指定した箇所だけ表示したい それでは、この test.rb の中の to_fraction というコードだけを表示したい場合はどうしたら良いだろう？
じつは現行のOctopressのデフォルトの状態ではそれができない(*1)。
ただ、この機能は v2.1 では既に実装済みのようで、Octopressを master ではなく 2.1 ブランチから取ってこればこのコードの一部分だけを表示する機能が使えるようになる。
この経緯については、 OctopressのPull request に記録がある。
2.1 ブランチをpullしてOctopressをアップデート $ git pull octopress 2.1 $ bundle install $ rake update_source $ rake update_style 以上で取り込み完了です。
masterでなく 2.1 からpullしていることに注意が必要。
include_code にstartとendを指定する あとは、↓のように include_code で start と end を指定するだけで、
      </description>
      
    </item>
    
  </channel>
</rss>
